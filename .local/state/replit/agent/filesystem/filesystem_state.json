{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Vocabulary Learning Application\n\n## Overview\n\nThis is a full-stack vocabulary learning application built with React, Express, and PostgreSQL. The application helps users learn English vocabulary through interactive exercises, spaced repetition algorithms, and personalized study plans. It features a modern UI built with shadcn/ui components and TailwindCSS, supporting both light and dark themes.\n\nThe application provides comprehensive vocabulary management, progress tracking, and multiple learning modes including study sessions, practice exercises, and review systems. It uses spaced repetition algorithms to optimize learning efficiency and retention.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: TailwindCSS with custom CSS variables for theming\n- **Theme System**: Light/dark mode support with persistent theme storage\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints for vocabulary management\n- **Development Server**: Vite middleware integration for hot reloading\n- **Error Handling**: Centralized error handling middleware\n- **Logging**: Request/response logging with duration tracking\n\n### Data Storage Solutions\n- **Database**: PostgreSQL as the primary database\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Connection**: Neon Database serverless PostgreSQL\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Storage Pattern**: Repository pattern with in-memory fallback storage for development\n\n### Key Data Models\n- **Words**: Core vocabulary entries with definitions, examples, and metadata\n- **User Progress**: Individual word mastery levels and learning statistics\n- **Study Sessions**: Learning session tracking with performance metrics\n- **Practice Results**: Exercise attempt results for progress analysis\n- **Study Plans**: Personalized learning schedules and goals\n\n### Learning Features\n- **Spaced Repetition**: SM-2 algorithm implementation for optimal review scheduling\n- **Multiple Exercise Types**: Multiple choice, fill-in-blanks, translation, spelling, and listening exercises\n- **Progress Tracking**: Mastery levels, study streaks, and performance analytics\n- **Vocabulary Management**: Word collections, starring system, and category organization\n- **Study Plans**: Customizable daily goals and learning schedules\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-kit**: Database migration and schema management tools\n\n### Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight client-side routing\n- **@radix-ui/***: Headless UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Type-safe CSS class variants\n- **react-hook-form**: Form state management and validation\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Type safety and enhanced developer experience\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Replit integration features\n\n### UI Components\n- **shadcn/ui**: Pre-built accessible components using Radix UI\n- **lucide-react**: Icon library\n- **embla-carousel-react**: Carousel/slider functionality\n- **cmdk**: Command palette and search interface\n\n### Utilities\n- **date-fns**: Date manipulation and formatting\n- **clsx & tailwind-merge**: Conditional CSS class handling\n- **nanoid**: Unique ID generation\n- **zod**: Runtime type validation and schema definition","size_bytes":4077},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { insertStudySessionSchema, insertPracticeResultSchema, insertStudyPlanSchema, insertWordSchema } from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit\n});\n\nfunction parseCSV(csvText: string): any[] {\n  const lines = csvText.trim().split('\\n');\n  if (lines.length < 2) return [];\n  \n  const headers = lines[0].split(',').map(h => h.trim());\n  const data = [];\n  \n  for (let i = 1; i < lines.length; i++) {\n    const values = lines[i].split(',').map(v => v.trim().replace(/^\"|\"$/g, ''));\n    const obj: any = {};\n    \n    headers.forEach((header, index) => {\n      const value = values[index] || '';\n      if (header === 'difficulty' || header === 'frequency') {\n        obj[header] = parseInt(value) || 1;\n      } else {\n        obj[header] = value;\n      }\n    });\n    \n    if (obj.word && obj.phonetic && obj.partOfSpeech && obj.chineseDefinition) {\n      data.push(obj);\n    }\n  }\n  \n  return data;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Words API\n  app.get(\"/api/words\", async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      \n      let words;\n      if (search) {\n        words = await storage.searchWords(search as string);\n      } else if (category) {\n        words = await storage.getWordsByCategory(category as string);\n      } else {\n        words = await storage.getAllWords();\n      }\n      \n      res.json(words);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch words\" });\n    }\n  });\n\n  app.post(\"/api/words\", async (req, res) => {\n    try {\n      console.log(\"POST /api/words - Request body:\", JSON.stringify(req.body, null, 2));\n      const result = insertWordSchema.safeParse(req.body);\n      if (!result.success) {\n        console.log(\"Validation errors:\", result.error.issues);\n        return res.status(400).json({ \n          message: \"Invalid word data\", \n          errors: result.error.issues \n        });\n      }\n      \n      const word = await storage.createWord(result.data);\n      console.log(\"Word created successfully:\", word.id);\n      res.json(word);\n    } catch (error) {\n      console.error(\"Error creating word:\", error);\n      res.status(500).json({ message: \"Failed to create word\" });\n    }\n  });\n\n  app.post(\"/api/words/import\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const fileContent = req.file.buffer.toString('utf-8');\n      const fileName = req.file.originalname.toLowerCase();\n      \n      let wordsData: any[] = [];\n      \n      if (fileName.endsWith('.csv')) {\n        wordsData = parseCSV(fileContent);\n      } else if (fileName.endsWith('.json')) {\n        try {\n          const parsed = JSON.parse(fileContent);\n          wordsData = Array.isArray(parsed) ? parsed : [parsed];\n        } catch (e) {\n          return res.status(400).json({ message: \"Invalid JSON format\" });\n        }\n      } else {\n        return res.status(400).json({ message: \"Unsupported file format\" });\n      }\n\n      let successCount = 0;\n      let failedCount = 0;\n      const errors: string[] = [];\n\n      for (const wordData of wordsData) {\n        try {\n          const result = insertWordSchema.safeParse(wordData);\n          if (result.success) {\n            await storage.createWord(result.data);\n            successCount++;\n          } else {\n            failedCount++;\n            errors.push(`Word \"${wordData.word || 'unknown'}\": ${result.error.issues.map(i => i.message).join(', ')}`);\n          }\n        } catch (error) {\n          failedCount++;\n          errors.push(`Word \"${wordData.word || 'unknown'}\": Failed to create`);\n        }\n      }\n\n      res.json({\n        success: successCount,\n        failed: failedCount,\n        total: wordsData.length,\n        errors: errors.slice(0, 10) // Return first 10 errors only\n      });\n\n    } catch (error) {\n      console.error(\"Import error:\", error);\n      res.status(500).json({ message: \"Failed to import words\" });\n    }\n  });\n\n  app.get(\"/api/words/:id\", async (req, res) => {\n    try {\n      const word = await storage.getWord(req.params.id);\n      if (!word) {\n        return res.status(404).json({ message: \"Word not found\" });\n      }\n      \n      const progress = await storage.getUserProgress(req.params.id);\n      res.json({ ...word, progress });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch word\" });\n    }\n  });\n\n  // Progress API\n  app.post(\"/api/progress/:wordId\", async (req, res) => {\n    try {\n      const { wordId } = req.params;\n      const progressData = req.body;\n      \n      const updatedProgress = await storage.updateUserProgress(wordId, progressData);\n      res.json(updatedProgress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  app.get(\"/api/words-for-review\", async (req, res) => {\n    try {\n      const words = await storage.getWordsForReview();\n      res.json(words);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch review words\" });\n    }\n  });\n\n  // Study Sessions API\n  app.post(\"/api/study-sessions\", async (req, res) => {\n    try {\n      const result = insertStudySessionSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid session data\" });\n      }\n      \n      const session = await storage.createStudySession(result.data);\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create study session\" });\n    }\n  });\n\n  // Practice API\n  app.post(\"/api/practice-results\", async (req, res) => {\n    try {\n      const result = insertPracticeResultSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid practice result data\" });\n      }\n      \n      const practiceResult = await storage.savePracticeResult(result.data);\n      res.json(practiceResult);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to save practice result\" });\n    }\n  });\n\n  // Study Plans API\n  app.post(\"/api/study-plans\", async (req, res) => {\n    try {\n      const result = insertStudyPlanSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid study plan data\" });\n      }\n      \n      const plan = await storage.createStudyPlan(result.data);\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create study plan\" });\n    }\n  });\n\n  app.get(\"/api/study-plans/active\", async (req, res) => {\n    try {\n      const plan = await storage.getActiveStudyPlan();\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active study plan\" });\n    }\n  });\n\n  app.patch(\"/api/study-plans/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const updatedPlan = await storage.updateStudyPlan(id, updates);\n      res.json(updatedPlan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update study plan\" });\n    }\n  });\n\n  // Dashboard API\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Word Collections API\n  app.get(\"/api/vocabulary-book\", async (req, res) => {\n    try {\n      const words = await storage.getVocabularyBook();\n      res.json(words);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vocabulary book\" });\n    }\n  });\n\n  app.get(\"/api/starred-words\", async (req, res) => {\n    try {\n      const words = await storage.getStarredWords();\n      res.json(words);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch starred words\" });\n    }\n  });\n\n  app.post(\"/api/words/:id/star\", async (req, res) => {\n    try {\n      await storage.toggleWordStar(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle star\" });\n    }\n  });\n\n  app.post(\"/api/words/:id/add-to-vocabulary\", async (req, res) => {\n    try {\n      await storage.addToVocabularyBook(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to add to vocabulary book\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8838},"server/storage.ts":{"content":"import { type Word, type UserProgress, type StudySession, type PracticeResult, type StudyPlan, type InsertWord, type InsertUserProgress, type InsertStudySession, type InsertPracticeResult, type InsertStudyPlan, type WordWithProgress, type DashboardStats } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Word management\n  getAllWords(): Promise<Word[]>;\n  getWordsByCategory(category: string): Promise<Word[]>;\n  getWord(id: string): Promise<Word | undefined>;\n  searchWords(query: string): Promise<Word[]>;\n  createWord(word: InsertWord): Promise<Word>;\n  \n  // User progress\n  getUserProgress(wordId: string): Promise<UserProgress | undefined>;\n  updateUserProgress(wordId: string, progress: Partial<InsertUserProgress>): Promise<UserProgress>;\n  getWordsForReview(): Promise<WordWithProgress[]>;\n  getWordsByMasteryLevel(minLevel: number, maxLevel: number): Promise<WordWithProgress[]>;\n  \n  // Study sessions\n  createStudySession(session: InsertStudySession): Promise<StudySession>;\n  getRecentStudySessions(limit: number): Promise<StudySession[]>;\n  \n  // Practice results\n  savePracticeResult(result: InsertPracticeResult): Promise<PracticeResult>;\n  getPracticeHistory(wordId: string): Promise<PracticeResult[]>;\n  \n  // Study plans\n  createStudyPlan(plan: InsertStudyPlan): Promise<StudyPlan>;\n  getActiveStudyPlan(): Promise<StudyPlan | undefined>;\n  updateStudyPlan(id: string, updates: Partial<InsertStudyPlan>): Promise<StudyPlan>;\n  \n  // Dashboard\n  getDashboardStats(): Promise<DashboardStats>;\n  \n  // Word collections\n  getVocabularyBook(): Promise<WordWithProgress[]>;\n  getStarredWords(): Promise<WordWithProgress[]>;\n  toggleWordStar(wordId: string): Promise<void>;\n  addToVocabularyBook(wordId: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private words: Map<string, Word> = new Map();\n  private userProgress: Map<string, UserProgress> = new Map();\n  private studySessions: Map<string, StudySession> = new Map();\n  private practiceResults: Map<string, PracticeResult> = new Map();\n  private studyPlans: Map<string, StudyPlan> = new Map();\n\n  constructor() {\n    this.initializeWithSampleData();\n  }\n\n  private initializeWithSampleData(): void {\n    // Initialize with common English words for middle/high school\n    const sampleWords: InsertWord[] = [\n      {\n        word: \"beautiful\",\n        phonetic: \"/ˈbjuːtɪfʊl/\",\n        partOfSpeech: \"adj.\",\n        chineseDefinition: \"美丽的，漂亮的\",\n        englishExample: \"She has a beautiful smile.\",\n        chineseExample: \"她有一个美丽的笑容。\",\n        difficulty: 2,\n        category: \"junior\",\n        frequency: 8\n      },\n      {\n        word: \"excellent\",\n        phonetic: \"/ˈeksələnt/\",\n        partOfSpeech: \"adj.\",\n        chineseDefinition: \"杰出的，优秀的\",\n        englishExample: \"Your work is excellent!\",\n        chineseExample: \"你的工作很出色！\",\n        difficulty: 3,\n        category: \"junior\",\n        frequency: 7\n      },\n      {\n        word: \"wonderful\",\n        phonetic: \"/ˈwʌndərfʊl/\",\n        partOfSpeech: \"adj.\",\n        chineseDefinition: \"精彩的，绝妙的\",\n        englishExample: \"We had a wonderful time at the party.\",\n        chineseExample: \"我们在聚会上玩得很开心。\",\n        difficulty: 2,\n        category: \"junior\",\n        frequency: 6\n      },\n      {\n        word: \"amazing\",\n        phonetic: \"/əˈmeɪzɪŋ/\",\n        partOfSpeech: \"adj.\",\n        chineseDefinition: \"令人惊异的，了不起的\",\n        englishExample: \"The view from the mountain is amazing.\",\n        chineseExample: \"山上的景色令人惊叹。\",\n        difficulty: 3,\n        category: \"junior\",\n        frequency: 8\n      },\n      {\n        word: \"important\",\n        phonetic: \"/ɪmˈpɔːrtənt/\",\n        partOfSpeech: \"adj.\",\n        chineseDefinition: \"重要的\",\n        englishExample: \"Education is very important for your future.\",\n        chineseExample: \"教育对你的未来非常重要。\",\n        difficulty: 2,\n        category: \"junior\",\n        frequency: 9\n      },\n      {\n        word: \"knowledge\",\n        phonetic: \"/ˈnɒlɪdʒ/\",\n        partOfSpeech: \"n.\",\n        chineseDefinition: \"知识，学问\",\n        englishExample: \"Reading books can increase your knowledge.\",\n        chineseExample: \"读书可以增加你的知识。\",\n        difficulty: 4,\n        category: \"senior\",\n        frequency: 7\n      },\n      {\n        word: \"environment\",\n        phonetic: \"/ɪnˈvaɪrənmənt/\",\n        partOfSpeech: \"n.\",\n        chineseDefinition: \"环境\",\n        englishExample: \"We must protect our environment.\",\n        chineseExample: \"我们必须保护我们的环境。\",\n        difficulty: 4,\n        category: \"senior\",\n        frequency: 8\n      },\n      {\n        word: \"experience\",\n        phonetic: \"/ɪkˈspɪriəns/\",\n        partOfSpeech: \"n.\",\n        chineseDefinition: \"经验，体验\",\n        englishExample: \"She has a lot of work experience.\",\n        chineseExample: \"她有很多工作经验。\",\n        difficulty: 3,\n        category: \"senior\",\n        frequency: 9\n      },\n      {\n        word: \"opportunity\",\n        phonetic: \"/ˌɒpəˈtuːnəti/\",\n        partOfSpeech: \"n.\",\n        chineseDefinition: \"机会，时机\",\n        englishExample: \"This is a great opportunity to learn.\",\n        chineseExample: \"这是一个很好的学习机会。\",\n        difficulty: 4,\n        category: \"senior\",\n        frequency: 8\n      },\n      {\n        word: \"success\",\n        phonetic: \"/səkˈses/\",\n        partOfSpeech: \"n.\",\n        chineseDefinition: \"成功\",\n        englishExample: \"Hard work is the key to success.\",\n        chineseExample: \"努力工作是成功的关键。\",\n        difficulty: 3,\n        category: \"junior\",\n        frequency: 8\n      }\n    ];\n\n    // Add sample words\n    sampleWords.forEach(word => {\n      const id = randomUUID();\n      this.words.set(id, { \n        ...word, \n        id,\n        difficulty: word.difficulty || 1,\n        category: word.category || \"general\", \n        frequency: word.frequency || 1\n      });\n      \n      // Add some sample progress\n      this.userProgress.set(id, {\n        id: randomUUID(),\n        wordId: id,\n        masteryLevel: Math.floor(Math.random() * 100),\n        timesStudied: Math.floor(Math.random() * 10) + 1,\n        timesCorrect: Math.floor(Math.random() * 8),\n        lastStudied: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n        nextReview: new Date(Date.now() + Math.random() * 7 * 24 * 60 * 60 * 1000),\n        isStarred: Math.random() > 0.7,\n        isInVocabularyBook: Math.random() > 0.6,\n      });\n    });\n  }\n\n  async getAllWords(): Promise<Word[]> {\n    return Array.from(this.words.values());\n  }\n\n  async getWordsByCategory(category: string): Promise<Word[]> {\n    return Array.from(this.words.values()).filter(word => word.category === category);\n  }\n\n  async getWord(id: string): Promise<Word | undefined> {\n    return this.words.get(id);\n  }\n\n  async searchWords(query: string): Promise<Word[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.words.values()).filter(word => \n      word.word.toLowerCase().includes(searchTerm) ||\n      word.chineseDefinition.toLowerCase().includes(searchTerm)\n    );\n  }\n\n  async createWord(insertWord: InsertWord): Promise<Word> {\n    const id = randomUUID();\n    const word: Word = { \n      ...insertWord, \n      id,\n      difficulty: insertWord.difficulty || 1,\n      category: insertWord.category || \"general\", \n      frequency: insertWord.frequency || 1\n    };\n    this.words.set(id, word);\n    return word;\n  }\n\n  async getUserProgress(wordId: string): Promise<UserProgress | undefined> {\n    return this.userProgress.get(wordId);\n  }\n\n  async updateUserProgress(wordId: string, progressUpdates: Partial<InsertUserProgress>): Promise<UserProgress> {\n    const existing = this.userProgress.get(wordId);\n    const updated: UserProgress = {\n      id: existing?.id || randomUUID(),\n      wordId,\n      masteryLevel: existing?.masteryLevel || 0,\n      timesStudied: existing?.timesStudied || 0,\n      timesCorrect: existing?.timesCorrect || 0,\n      lastStudied: existing?.lastStudied || null,\n      nextReview: existing?.nextReview || null,\n      isStarred: existing?.isStarred || false,\n      isInVocabularyBook: existing?.isInVocabularyBook || false,\n      ...progressUpdates,\n    };\n    this.userProgress.set(wordId, updated);\n    return updated;\n  }\n\n  async getWordsForReview(): Promise<WordWithProgress[]> {\n    const now = new Date();\n    const results: WordWithProgress[] = [];\n    \n    for (const [wordId, progress] of Array.from(this.userProgress.entries())) {\n      if (progress.nextReview && progress.nextReview <= now) {\n        const word = this.words.get(wordId);\n        if (word) {\n          results.push({ ...word, progress });\n        }\n      }\n    }\n    \n    return results.slice(0, 50); // Limit to 50 words for review\n  }\n\n  async getWordsByMasteryLevel(minLevel: number, maxLevel: number): Promise<WordWithProgress[]> {\n    const results: WordWithProgress[] = [];\n    \n    for (const [wordId, progress] of Array.from(this.userProgress.entries())) {\n      if (progress.masteryLevel >= minLevel && progress.masteryLevel <= maxLevel) {\n        const word = this.words.get(wordId);\n        if (word) {\n          results.push({ ...word, progress });\n        }\n      }\n    }\n    \n    return results;\n  }\n\n  async createStudySession(insertSession: InsertStudySession): Promise<StudySession> {\n    const id = randomUUID();\n    const session: StudySession = {\n      ...insertSession,\n      id,\n      createdAt: new Date(),\n      wordsLearned: insertSession.wordsLearned || 0,\n      timeSpent: insertSession.timeSpent || 0,\n      accuracy: insertSession.accuracy || 0,\n    };\n    this.studySessions.set(id, session);\n    return session;\n  }\n\n  async getRecentStudySessions(limit: number): Promise<StudySession[]> {\n    return Array.from(this.studySessions.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async savePracticeResult(insertResult: InsertPracticeResult): Promise<PracticeResult> {\n    const id = randomUUID();\n    const result: PracticeResult = { \n      ...insertResult, \n      id,\n      timeSpent: insertResult.timeSpent || 0,\n      userAnswer: insertResult.userAnswer || null\n    };\n    this.practiceResults.set(id, result);\n    return result;\n  }\n\n  async getPracticeHistory(wordId: string): Promise<PracticeResult[]> {\n    return Array.from(this.practiceResults.values()).filter(result => result.wordId === wordId);\n  }\n\n  async createStudyPlan(insertPlan: InsertStudyPlan): Promise<StudyPlan> {\n    const id = randomUUID();\n    const plan: StudyPlan = {\n      ...insertPlan,\n      id,\n      createdAt: new Date(),\n      dailyWordCount: insertPlan.dailyWordCount || 20,\n      studyDuration: insertPlan.studyDuration || 30,\n      reviewStrategy: insertPlan.reviewStrategy || \"spaced\",\n      studyFocus: insertPlan.studyFocus || [\"vocabulary\", \"spelling\", \"context\"],\n      weeklySchedule: insertPlan.weeklySchedule || [true, true, true, true, true, true, false],\n      isActive: insertPlan.isActive || false,\n    };\n    this.studyPlans.set(id, plan);\n    return plan;\n  }\n\n  async getActiveStudyPlan(): Promise<StudyPlan | undefined> {\n    return Array.from(this.studyPlans.values()).find(plan => plan.isActive);\n  }\n\n  async updateStudyPlan(id: string, updates: Partial<InsertStudyPlan>): Promise<StudyPlan> {\n    const existing = this.studyPlans.get(id);\n    if (!existing) {\n      throw new Error(\"Study plan not found\");\n    }\n    const updated = { ...existing, ...updates };\n    this.studyPlans.set(id, updated);\n    return updated;\n  }\n\n  async getDashboardStats(): Promise<DashboardStats> {\n    const sessions = Array.from(this.studySessions.values());\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todaySessions = sessions.filter(s => s.createdAt >= today);\n    const recentSessions = sessions\n      .filter(s => s.createdAt >= new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Calculate streak\n    let streakDays = 0;\n    const dates = recentSessions.map(s => {\n      const date = new Date(s.createdAt);\n      date.setHours(0, 0, 0, 0);\n      return date.getTime();\n    });\n    const uniqueDates = Array.from(new Set(dates)).sort((a, b) => b - a);\n    \n    for (let i = 0; i < uniqueDates.length; i++) {\n      const expectedDate = today.getTime() - (i * 24 * 60 * 60 * 1000);\n      if (uniqueDates[i] === expectedDate) {\n        streakDays++;\n      } else {\n        break;\n      }\n    }\n\n    const todayStudyTime = todaySessions.reduce((sum, s) => sum + s.timeSpent, 0);\n    const totalWordsLearned = Array.from(this.userProgress.values()).filter(p => p.masteryLevel > 50).length;\n    const avgMastery = Array.from(this.userProgress.values()).reduce((sum, p) => sum + p.masteryLevel, 0) / this.userProgress.size;\n\n    // Calculate review reminders\n    const now = new Date();\n    const reviewWords = Array.from(this.userProgress.values()).filter(p => p.nextReview && p.nextReview <= now);\n    const urgent = reviewWords.filter(p => p.masteryLevel < 30).length;\n    const regular = reviewWords.filter(p => p.masteryLevel >= 30 && p.masteryLevel < 70).length;\n    const consolidation = reviewWords.filter(p => p.masteryLevel >= 70).length;\n\n    return {\n      streakDays,\n      totalWordsLearned,\n      masteryRate: Math.round(avgMastery),\n      todayStudyTime,\n      todayProgress: {\n        newWords: { current: todaySessions.filter(s => s.sessionType === 'study').reduce((sum, s) => sum + s.wordsLearned, 0), target: 10 },\n        review: { current: todaySessions.filter(s => s.sessionType === 'review').reduce((sum, s) => sum + s.wordsLearned, 0), target: 15 },\n        listening: { current: todaySessions.filter(s => s.sessionType === 'practice').reduce((sum, s) => sum + s.wordsLearned, 0), target: 8 },\n      },\n      reviewReminders: { urgent, regular, consolidation }\n    };\n  }\n\n  async getVocabularyBook(): Promise<WordWithProgress[]> {\n    const results: WordWithProgress[] = [];\n    \n    for (const [wordId, progress] of Array.from(this.userProgress.entries())) {\n      if (progress.isInVocabularyBook) {\n        const word = this.words.get(wordId);\n        if (word) {\n          results.push({ ...word, progress });\n        }\n      }\n    }\n    \n    return results;\n  }\n\n  async getStarredWords(): Promise<WordWithProgress[]> {\n    const results: WordWithProgress[] = [];\n    \n    for (const [wordId, progress] of Array.from(this.userProgress.entries())) {\n      if (progress.isStarred) {\n        const word = this.words.get(wordId);\n        if (word) {\n          results.push({ ...word, progress });\n        }\n      }\n    }\n    \n    return results;\n  }\n\n  async toggleWordStar(wordId: string): Promise<void> {\n    const progress = this.userProgress.get(wordId);\n    if (progress) {\n      progress.isStarred = !progress.isStarred;\n      this.userProgress.set(wordId, progress);\n    }\n  }\n\n  async addToVocabularyBook(wordId: string): Promise<void> {\n    const progress = this.userProgress.get(wordId);\n    if (progress) {\n      progress.isInVocabularyBook = true;\n      this.userProgress.set(wordId, progress);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15471},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, real, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const words = pgTable(\"words\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  word: text(\"word\").notNull(),\n  phonetic: text(\"phonetic\").notNull(),\n  partOfSpeech: text(\"part_of_speech\").notNull(),\n  chineseDefinition: text(\"chinese_definition\").notNull(),\n  englishExample: text(\"english_example\").notNull(),\n  chineseExample: text(\"chinese_example\").notNull(),\n  difficulty: integer(\"difficulty\").notNull().default(1), // 1-5 scale\n  category: text(\"category\").notNull().default(\"general\"), // junior, senior, custom\n  frequency: integer(\"frequency\").notNull().default(1), // usage frequency\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  wordId: varchar(\"word_id\").notNull().references(() => words.id),\n  masteryLevel: integer(\"mastery_level\").notNull().default(0), // 0-100\n  timesStudied: integer(\"times_studied\").notNull().default(0),\n  timesCorrect: integer(\"times_correct\").notNull().default(0),\n  lastStudied: timestamp(\"last_studied\"),\n  nextReview: timestamp(\"next_review\"),\n  isStarred: boolean(\"is_starred\").notNull().default(false),\n  isInVocabularyBook: boolean(\"is_in_vocabulary_book\").notNull().default(false),\n});\n\nexport const studySessions = pgTable(\"study_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionType: text(\"session_type\").notNull(), // study, practice, review\n  wordsLearned: integer(\"words_learned\").notNull().default(0),\n  timeSpent: integer(\"time_spent\").notNull().default(0), // in minutes\n  accuracy: real(\"accuracy\").notNull().default(0), // 0-1\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const practiceResults = pgTable(\"practice_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => studySessions.id),\n  wordId: varchar(\"word_id\").notNull().references(() => words.id),\n  exerciseType: text(\"exercise_type\").notNull(), // multiple-choice, fill-blank, translation, listening\n  isCorrect: boolean(\"is_correct\").notNull(),\n  userAnswer: text(\"user_answer\"),\n  correctAnswer: text(\"correct_answer\").notNull(),\n  timeSpent: integer(\"time_spent\").notNull().default(0), // in seconds\n});\n\nexport const studyPlans = pgTable(\"study_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  targetCategory: text(\"target_category\").notNull(),\n  dailyWordCount: integer(\"daily_word_count\").notNull().default(20),\n  studyDuration: integer(\"study_duration\").notNull().default(30), // in minutes\n  reviewStrategy: text(\"review_strategy\").notNull().default(\"spaced\"), // spaced, regular, custom\n  studyFocus: jsonb(\"study_focus\").notNull().default('[\"vocabulary\", \"spelling\", \"context\"]'),\n  weeklySchedule: jsonb(\"weekly_schedule\").notNull().default('[true, true, true, true, true, true, false]'),\n  isActive: boolean(\"is_active\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertWordSchema = createInsertSchema(words).omit({\n  id: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n});\n\nexport const insertStudySessionSchema = createInsertSchema(studySessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPracticeResultSchema = createInsertSchema(practiceResults).omit({\n  id: true,\n});\n\nexport const insertStudyPlanSchema = createInsertSchema(studyPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Word = typeof words.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type StudySession = typeof studySessions.$inferSelect;\nexport type PracticeResult = typeof practiceResults.$inferSelect;\nexport type StudyPlan = typeof studyPlans.$inferSelect;\n\nexport type InsertWord = z.infer<typeof insertWordSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\nexport type InsertPracticeResult = z.infer<typeof insertPracticeResultSchema>;\nexport type InsertStudyPlan = z.infer<typeof insertStudyPlanSchema>;\n\n// Additional types for API responses\nexport type WordWithProgress = Word & {\n  progress?: UserProgress;\n};\n\nexport type DashboardStats = {\n  streakDays: number;\n  totalWordsLearned: number;\n  masteryRate: number;\n  todayStudyTime: number;\n  todayProgress: {\n    newWords: { current: number; target: number };\n    review: { current: number; target: number };\n    listening: { current: number; target: number };\n  };\n  reviewReminders: {\n    urgent: number;\n    regular: number;\n    consolidation: number;\n  };\n};\n","size_bytes":4965},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState, useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found.tsx\";\nimport Dashboard from \"@/pages/dashboard.tsx\";\nimport Study from \"@/pages/study.tsx\";\nimport Practice from \"@/pages/practice.tsx\";\nimport Plan from \"@/pages/plan.tsx\";\nimport WordBank from \"@/pages/wordbank.tsx\";\nimport Header from \"@/components/layout/header\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/study\" component={Study} />\n          <Route path=\"/practice\" component={Practice} />\n          <Route path=\"/plan\" component={Plan} />\n          <Route path=\"/wordbank\" component={WordBank} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"bg-background text-foreground min-h-screen\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1944},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Lora:wght@400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(230, 100%, 98%);\n  --foreground: hsl(230, 15%, 15%);\n  --card: hsl(230, 50%, 97%);\n  --card-foreground: hsl(230, 15%, 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(230, 15%, 15%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(196, 75%, 88%);\n  --secondary-foreground: hsl(230, 15%, 15%);\n  --muted: hsl(230, 25%, 95%);\n  --muted-foreground: hsl(230, 8%, 45%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(230, 20%, 88%);\n  --input: hsl(230, 20%, 92%);\n  --ring: hsl(262, 83%, 58%);\n  --chart-1: hsl(262, 83%, 58%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(230, 50%, 97%);\n  --sidebar-foreground: hsl(230, 15%, 15%);\n  --sidebar-primary: hsl(262, 83%, 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(230, 25%, 95%);\n  --sidebar-accent-foreground: hsl(262, 83%, 58%);\n  --sidebar-border: hsl(230, 20%, 88%);\n  --sidebar-ring: hsl(262, 83%, 58%);\n  --font-sans: 'Space Grotesk', sans-serif;\n  --font-serif: 'Lora', serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(262 83% 58% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(262 83% 58% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(262 83% 58% / 0.05), 0px 1px 3px 0px hsl(262 83% 58% / 0.1);\n  --shadow: 0px 1px 2px 0px hsl(262 83% 58% / 0.05), 0px 2px 4px 0px hsl(262 83% 58% / 0.1);\n  --shadow-md: 0px 2px 4px 0px hsl(262 83% 58% / 0.05), 0px 4px 8px 0px hsl(262 83% 58% / 0.1);\n  --shadow-lg: 0px 4px 8px 0px hsl(262 83% 58% / 0.05), 0px 8px 16px 0px hsl(262 83% 58% / 0.1);\n  --shadow-xl: 0px 8px 16px 0px hsl(262 83% 58% / 0.05), 0px 16px 32px 0px hsl(262 83% 58% / 0.1);\n  --shadow-2xl: 0px 16px 32px 0px hsl(262 83% 58% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(230, 15%, 6%);\n  --foreground: hsl(230, 5%, 90%);\n  --card: hsl(230, 15%, 9%);\n  --card-foreground: hsl(230, 5%, 90%);\n  --popover: hsl(230, 15%, 6%);\n  --popover-foreground: hsl(230, 5%, 90%);\n  --primary: hsl(270, 95%, 75%);\n  --primary-foreground: hsl(230, 15%, 6%);\n  --secondary: hsl(230, 15%, 12%);\n  --secondary-foreground: hsl(230, 5%, 90%);\n  --muted: hsl(230, 15%, 12%);\n  --muted-foreground: hsl(230, 5%, 60%);\n  --accent: hsl(151, 55%, 42%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0, 62%, 56%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(230, 15%, 18%);\n  --input: hsl(230, 15%, 12%);\n  --ring: hsl(270, 95%, 75%);\n  --chart-1: hsl(270, 95%, 75%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(230, 15%, 9%);\n  --sidebar-foreground: hsl(230, 5%, 90%);\n  --sidebar-primary: hsl(270, 95%, 75%);\n  --sidebar-primary-foreground: hsl(230, 15%, 6%);\n  --sidebar-accent: hsl(230, 15%, 12%);\n  --sidebar-accent-foreground: hsl(270, 95%, 75%);\n  --sidebar-border: hsl(230, 15%, 18%);\n  --sidebar-ring: hsl(270, 95%, 75%);\n  --font-sans: 'Space Grotesk', sans-serif;\n  --font-serif: 'Lora', serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(270 95% 75% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(270 95% 75% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(270 95% 75% / 0.05), 0px 1px 3px 0px hsl(270 95% 75% / 0.1);\n  --shadow: 0px 1px 2px 0px hsl(270 95% 75% / 0.05), 0px 2px 4px 0px hsl(270 95% 75% / 0.1);\n  --shadow-md: 0px 2px 4px 0px hsl(270 95% 75% / 0.05), 0px 4px 8px 0px hsl(270 95% 75% / 0.1);\n  --shadow-lg: 0px 4px 8px 0px hsl(270 95% 75% / 0.05), 0px 8px 16px 0px hsl(270 95% 75% / 0.1);\n  --shadow-xl: 0px 8px 16px 0px hsl(270 95% 75% / 0.05), 0px 16px 32px 0px hsl(270 95% 75% / 0.1);\n  --shadow-2xl: 0px 16px 32px 0px hsl(270 95% 75% / 0.05);\n  --spacing: 0.25rem;\n  --tracking-normal: 0em;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.flip-card {\n  perspective: 1000px;\n  width: 100%;\n  height: 400px;\n}\n\n.flip-card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n  cursor: pointer;\n}\n\n.flip-card.flipped .flip-card-inner {\n  transform: rotateY(180deg);\n}\n\n.flip-card-front, .flip-card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  border-radius: var(--radius);\n}\n\n.flip-card-back {\n  transform: rotateY(180deg);\n}\n\n.progress-circle {\n  transform: rotate(-90deg);\n}\n\n.study-streak {\n  background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.learning-card-gradient {\n  background: linear-gradient(135deg, var(--primary) 0%, var(--chart-2) 100%);\n}\n\n.practice-card-gradient {\n  background: linear-gradient(135deg, var(--accent) 0%, var(--chart-4) 100%);\n}\n\n.plan-card-gradient {\n  background: linear-gradient(135deg, var(--chart-5) 0%, var(--chart-3) 100%);\n}\n","size_bytes":5533},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/practice-exercise.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Volume2 } from \"lucide-react\";\nimport type { WordWithProgress } from \"@shared/schema\";\n\nexport type ExerciseType = \"multiple-choice\" | \"fill-blank\" | \"translation\" | \"listening\" | \"spelling\";\n\ninterface ExerciseQuestion {\n  id: string;\n  word: WordWithProgress;\n  type: ExerciseType;\n  question: string;\n  options?: string[];\n  correctAnswer: string;\n  userAnswer?: string;\n  isCorrect?: boolean;\n}\n\ninterface PracticeExerciseProps {\n  question: ExerciseQuestion;\n  onAnswer: (answer: string) => void;\n  isAnswered: boolean;\n  showCorrection: boolean;\n  timeRemaining?: number;\n}\n\nexport default function PracticeExercise({ \n  question, \n  onAnswer, \n  isAnswered, \n  showCorrection,\n  timeRemaining \n}: PracticeExerciseProps) {\n  const [userInput, setUserInput] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\n\n  useEffect(() => {\n    setUserInput(\"\");\n    setSelectedOption(null);\n  }, [question.id]);\n\n  const playAudio = () => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(question.word.word);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const handleOptionSelect = (option: string) => {\n    if (isAnswered) return;\n    setSelectedOption(option);\n    onAnswer(option);\n  };\n\n  const handleInputSubmit = (e: React.KeyboardEvent | React.FormEvent) => {\n    e.preventDefault();\n    if (!isAnswered && userInput.trim()) {\n      onAnswer(userInput.trim());\n    }\n  };\n\n  const getOptionClassName = (option: string) => {\n    if (!isAnswered) {\n      return selectedOption === option \n        ? \"border-primary bg-primary/10\" \n        : \"border-transparent hover:border-primary\";\n    }\n\n    if (showCorrection) {\n      if (option === question.correctAnswer) {\n        return \"border-chart-2 bg-chart-2/10 text-chart-2\";\n      }\n      if (selectedOption === option && option !== question.correctAnswer) {\n        return \"border-destructive bg-destructive/10 text-destructive\";\n      }\n    }\n\n    return selectedOption === option ? \"border-primary bg-primary/10\" : \"border-transparent\";\n  };\n\n  const renderMultipleChoice = () => (\n    <div className=\"space-y-4\">\n      {question.options?.map((option, index) => {\n        const letter = String.fromCharCode(65 + index);\n        return (\n          <Button\n            key={index}\n            variant=\"outline\"\n            className={`w-full p-4 text-left justify-start h-auto border-2 transition-colors ${getOptionClassName(option)}`}\n            onClick={() => handleOptionSelect(option)}\n            disabled={isAnswered}\n            data-testid={`button-option-${letter}`}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"flex-shrink-0 w-8 h-8 bg-card rounded-full flex items-center justify-center font-semibold\">\n                {letter}\n              </span>\n              <span>{option}</span>\n            </div>\n          </Button>\n        );\n      })}\n    </div>\n  );\n\n  const renderTextInput = () => (\n    <form onSubmit={handleInputSubmit} className=\"space-y-4\">\n      <Input\n        type=\"text\"\n        placeholder=\"请输入答案...\"\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        className=\"w-full p-4 text-lg\"\n        disabled={isAnswered}\n        data-testid=\"input-answer\"\n      />\n      {!isAnswered && (\n        <Button \n          type=\"submit\" \n          className=\"w-full\"\n          disabled={!userInput.trim()}\n          data-testid=\"button-submit-answer\"\n        >\n          提交答案\n        </Button>\n      )}\n      {showCorrection && (\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <span className=\"text-sm font-medium\">正确答案：</span>\n            <span className=\"text-chart-2 font-semibold\" data-testid=\"text-correct-answer\">\n              {question.correctAnswer}\n            </span>\n          </div>\n          {question.userAnswer && question.userAnswer !== question.correctAnswer && (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm font-medium\">你的答案：</span>\n              <span className=\"text-destructive\" data-testid=\"text-user-answer\">\n                {question.userAnswer}\n              </span>\n            </div>\n          )}\n        </div>\n      )}\n    </form>\n  );\n\n  const renderListening = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Button \n          size=\"lg\" \n          onClick={playAudio}\n          className=\"mb-4\"\n          data-testid=\"button-play-listening\"\n        >\n          <Volume2 className=\"mr-2 h-6 w-6\" />\n          播放单词\n        </Button>\n        <p className=\"text-muted-foreground\">点击播放按钮听取单词发音</p>\n      </div>\n      {question.options ? renderMultipleChoice() : renderTextInput()}\n    </div>\n  );\n\n  const renderFillBlank = () => {\n    const sentence = question.question;\n    const parts = sentence.split('____');\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center p-6 bg-muted rounded-lg\">\n          <div className=\"text-lg leading-relaxed\">\n            {parts.map((part, index) => (\n              <span key={index}>\n                {part}\n                {index < parts.length - 1 && (\n                  <span className=\"inline-block mx-2\">\n                    {isAnswered ? (\n                      <span className={`px-3 py-1 rounded font-semibold ${\n                        showCorrection \n                          ? question.userAnswer === question.correctAnswer \n                            ? \"bg-chart-2 text-white\" \n                            : \"bg-destructive text-white\"\n                          : \"bg-primary text-primary-foreground\"\n                      }`}>\n                        {question.userAnswer || \"____\"}\n                      </span>\n                    ) : (\n                      <span className=\"border-b-2 border-primary px-3 py-1\">____</span>\n                    )}\n                  </span>\n                )}\n              </span>\n            ))}\n          </div>\n        </div>\n        {renderTextInput()}\n      </div>\n    );\n  };\n\n  const renderTranslation = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center p-6 bg-muted rounded-lg\">\n        <div className=\"text-xl font-medium text-card-foreground\">\n          {question.question.includes(\"请翻译\") \n            ? question.question.replace(\"请翻译：\", \"\")\n            : question.word.word\n          }\n        </div>\n      </div>\n      {renderTextInput()}\n    </div>\n  );\n\n  const renderSpelling = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Button \n          size=\"lg\" \n          onClick={playAudio}\n          className=\"mb-4\"\n          data-testid=\"button-play-spelling\"\n        >\n          <Volume2 className=\"mr-2 h-6 w-6\" />\n          播放发音\n        </Button>\n        <div className=\"p-4 bg-muted rounded-lg\">\n          <p className=\"text-lg font-medium text-card-foreground mb-2\">\n            {question.word.chineseDefinition}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            听发音并拼写出正确的单词\n          </p>\n        </div>\n      </div>\n      {renderTextInput()}\n    </div>\n  );\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Question Header */}\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-semibold text-card-foreground mb-2\" data-testid=\"text-question-title\">\n              {question.type === \"listening\" ? \"听音练习\" :\n               question.type === \"fill-blank\" ? \"填空练习\" :\n               question.type === \"translation\" ? \"翻译练习\" :\n               question.type === \"spelling\" ? \"拼写练习\" :\n               \"选择练习\"}\n            </h3>\n            {timeRemaining !== undefined && (\n              <p className=\"text-sm text-muted-foreground\">\n                剩余时间: {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, '0')}\n              </p>\n            )}\n          </div>\n\n          {/* Exercise Content */}\n          <div className=\"mb-8\">\n            {question.type === \"multiple-choice\" && (\n              <div>\n                <h4 className=\"text-xl font-medium text-card-foreground mb-6 text-center\" data-testid=\"text-question\">\n                  {question.question}\n                </h4>\n                {renderMultipleChoice()}\n              </div>\n            )}\n            \n            {question.type === \"fill-blank\" && renderFillBlank()}\n            {question.type === \"translation\" && renderTranslation()}\n            {question.type === \"listening\" && renderListening()}\n            {question.type === \"spelling\" && renderSpelling()}\n          </div>\n\n          {/* Results */}\n          {showCorrection && question.type === \"multiple-choice\" && (\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <div className=\"flex items-center justify-center space-x-4\">\n                <span className={`px-4 py-2 rounded-full font-semibold ${\n                  question.isCorrect \n                    ? \"bg-chart-2 text-white\" \n                    : \"bg-destructive text-white\"\n                }`}>\n                  {question.isCorrect ? \"✓ 正确\" : \"✗ 错误\"}\n                </span>\n                {!question.isCorrect && (\n                  <span className=\"text-sm text-muted-foreground\">\n                    正确答案: {question.correctAnswer}\n                  </span>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10033},"client/src/components/word-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Volume2 } from \"lucide-react\";\nimport type { WordWithProgress } from \"@shared/schema\";\n\ninterface WordCardProps {\n  word: WordWithProgress;\n  onPlayAudio: () => void;\n}\n\nexport default function WordCard({ word, onPlayAudio }: WordCardProps) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleFlip = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n  const handleAudioClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onPlayAudio();\n  };\n\n  return (\n    <div className=\"flip-card\" onClick={handleFlip} data-testid=\"word-card\">\n      <div className={`flip-card-inner ${isFlipped ? 'flipped' : ''}`}>\n        {/* Front of card */}\n        <Card className=\"flip-card-front border border-border\">\n          <CardContent className=\"h-full flex flex-col justify-center items-center p-8\">\n            <div className=\"text-center mb-6\">\n              <Button \n                size=\"lg\" \n                className=\"p-3 rounded-full mb-4\" \n                onClick={handleAudioClick}\n                data-testid=\"button-play-audio\"\n              >\n                <Volume2 className=\"h-6 w-6\" />\n              </Button>\n              <h3 className=\"text-4xl font-bold text-card-foreground mb-2\" data-testid=\"text-word-front\">\n                {word.word}\n              </h3>\n              <p className=\"text-lg text-muted-foreground\" data-testid=\"text-phonetic-front\">\n                {word.phonetic}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">点击翻转查看释义</p>\n              <div className=\"flex justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Back of card */}\n        <Card className=\"flip-card-back border border-border\">\n          <CardContent className=\"h-full flex flex-col justify-center p-8\">\n            <div className=\"mb-6\">\n              <h4 className=\"text-sm font-semibold text-muted-foreground mb-2\">中文释义</h4>\n              <p className=\"text-2xl font-semibold text-card-foreground mb-4\" data-testid=\"text-definition-back\">\n                {word.chineseDefinition}\n              </p>\n            </div>\n            \n            <div className=\"mb-6\">\n              <h4 className=\"text-sm font-semibold text-muted-foreground mb-2\">词性</h4>\n              <Badge variant=\"secondary\" data-testid=\"badge-part-of-speech\">\n                {word.partOfSpeech}\n              </Badge>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-semibold text-muted-foreground mb-2\">例句</h4>\n              <div className=\"bg-muted rounded-lg p-4\">\n                <p className=\"text-card-foreground mb-2\" data-testid=\"text-english-example\">\n                  {word.englishExample}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-chinese-example\">\n                  {word.chineseExample}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3531},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/spaced-repetition.ts":{"content":"/**\n * Spaced Repetition Algorithm Implementation\n * Based on the SuperMemo SM-2 algorithm with modifications for vocabulary learning\n */\n\nexport interface ReviewSchedule {\n  nextReviewDate: Date;\n  interval: number; // days until next review\n  easeFactor: number; // multiplier for interval calculation\n  repetitions: number; // number of successful reviews\n}\n\nexport interface ReviewResult {\n  quality: number; // 0-5 scale (0 = complete blackout, 5 = perfect response)\n  responseTime?: number; // milliseconds taken to respond\n  isCorrect: boolean;\n}\n\nexport class SpacedRepetitionScheduler {\n  private static readonly MIN_EASE_FACTOR = 1.3;\n  private static readonly INITIAL_EASE_FACTOR = 2.5;\n  private static readonly INITIAL_INTERVAL = 1;\n\n  /**\n   * Calculate the next review schedule based on performance\n   */\n  static calculateNextReview(\n    currentSchedule: ReviewSchedule | null,\n    reviewResult: ReviewResult\n  ): ReviewSchedule {\n    const { quality, isCorrect } = reviewResult;\n    \n    // Initialize for new words\n    if (!currentSchedule) {\n      return {\n        nextReviewDate: this.addDays(new Date(), this.INITIAL_INTERVAL),\n        interval: this.INITIAL_INTERVAL,\n        easeFactor: this.INITIAL_EASE_FACTOR,\n        repetitions: isCorrect ? 1 : 0,\n      };\n    }\n\n    let { interval, easeFactor, repetitions } = currentSchedule;\n\n    if (quality < 3 || !isCorrect) {\n      // Failed review - reset repetitions and use short interval\n      repetitions = 0;\n      interval = 1;\n    } else {\n      // Successful review\n      repetitions += 1;\n\n      if (repetitions === 1) {\n        interval = 1;\n      } else if (repetitions === 2) {\n        interval = 6;\n      } else {\n        interval = Math.round(interval * easeFactor);\n      }\n\n      // Adjust ease factor based on quality\n      easeFactor = easeFactor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));\n      easeFactor = Math.max(easeFactor, this.MIN_EASE_FACTOR);\n    }\n\n    return {\n      nextReviewDate: this.addDays(new Date(), interval),\n      interval,\n      easeFactor,\n      repetitions,\n    };\n  }\n\n  /**\n   * Convert mastery level and performance to review quality (0-5)\n   */\n  static calculateQuality(masteryLevel: number, isCorrect: boolean, responseTime?: number): number {\n    if (!isCorrect) {\n      return masteryLevel < 20 ? 0 : masteryLevel < 50 ? 1 : 2;\n    }\n\n    // Base quality on mastery level\n    let quality = Math.floor(masteryLevel / 20) + 1; // 1-5 based on mastery\n\n    // Adjust for response time if provided (faster = higher quality)\n    if (responseTime) {\n      if (responseTime < 3000) quality = Math.min(5, quality + 1); // Very fast\n      else if (responseTime > 10000) quality = Math.max(1, quality - 1); // Very slow\n    }\n\n    return Math.max(0, Math.min(5, quality));\n  }\n\n  /**\n   * Determine if a word needs review based on current date\n   */\n  static needsReview(schedule: ReviewSchedule | null): boolean {\n    if (!schedule) return true;\n    return new Date() >= schedule.nextReviewDate;\n  }\n\n  /**\n   * Get priority score for review ordering (higher = more urgent)\n   */\n  static getReviewPriority(schedule: ReviewSchedule | null, masteryLevel: number): number {\n    if (!schedule) return 100; // New words get highest priority\n\n    const now = new Date();\n    const daysOverdue = Math.max(0, \n      (now.getTime() - schedule.nextReviewDate.getTime()) / (1000 * 60 * 60 * 24)\n    );\n\n    // Priority factors:\n    // 1. Overdue time (more overdue = higher priority)\n    // 2. Low mastery level (less mastered = higher priority)\n    // 3. Repetition count (fewer repetitions = higher priority)\n\n    let priority = 0;\n\n    // Overdue factor (0-50 points)\n    priority += Math.min(50, daysOverdue * 10);\n\n    // Mastery factor (0-30 points, inverse of mastery level)\n    priority += (100 - masteryLevel) * 0.3;\n\n    // Repetition factor (0-20 points)\n    priority += Math.max(0, 20 - schedule.repetitions * 2);\n\n    return priority;\n  }\n\n  /**\n   * Generate optimal review sessions based on available time and priorities\n   */\n  static generateReviewSession(\n    wordsToReview: Array<{\n      id: string;\n      schedule: ReviewSchedule | null;\n      masteryLevel: number;\n    }>,\n    maxWords: number = 20\n  ): string[] {\n    // Calculate priorities and sort\n    const prioritizedWords = wordsToReview\n      .map(word => ({\n        ...word,\n        priority: this.getReviewPriority(word.schedule, word.masteryLevel),\n      }))\n      .sort((a, b) => b.priority - a.priority);\n\n    // Select top priority words\n    return prioritizedWords.slice(0, maxWords).map(word => word.id);\n  }\n\n  /**\n   * Estimate study time based on word difficulty and mastery\n   */\n  static estimateStudyTime(masteryLevel: number, wordDifficulty: number): number {\n    // Base time in seconds\n    const baseTime = 30;\n    \n    // Adjust for mastery (less mastered = more time)\n    const masteryMultiplier = (100 - masteryLevel) / 100 + 0.5;\n    \n    // Adjust for difficulty (1-5 scale)\n    const difficultyMultiplier = wordDifficulty / 3;\n    \n    return Math.round(baseTime * masteryMultiplier * difficultyMultiplier);\n  }\n\n  /**\n   * Track learning curve and suggest adjustments\n   */\n  static analyzeLearningPattern(\n    recentResults: Array<{\n      date: Date;\n      isCorrect: boolean;\n      masteryLevel: number;\n    }>\n  ): {\n    trend: 'improving' | 'stable' | 'declining';\n    recommendation: string;\n  } {\n    if (recentResults.length < 5) {\n      return {\n        trend: 'stable',\n        recommendation: '继续学习以建立学习模式分析',\n      };\n    }\n\n    // Calculate trend over recent sessions\n    const recent = recentResults.slice(-5);\n    const earlier = recentResults.slice(-10, -5);\n    \n    const recentAvg = recent.reduce((sum, r) => sum + r.masteryLevel, 0) / recent.length;\n    const earlierAvg = earlier.length > 0 \n      ? earlier.reduce((sum, r) => sum + r.masteryLevel, 0) / earlier.length\n      : recentAvg;\n\n    const improvement = recentAvg - earlierAvg;\n\n    if (improvement > 5) {\n      return {\n        trend: 'improving',\n        recommendation: '学习进展很好！可以考虑增加每日学习量',\n      };\n    } else if (improvement < -5) {\n      return {\n        trend: 'declining',\n        recommendation: '建议减少学习量，增加复习频率',\n      };\n    } else {\n      return {\n        trend: 'stable',\n        recommendation: '保持当前学习节奏',\n      };\n    }\n  }\n\n  /**\n   * Helper function to add days to a date\n   */\n  private static addDays(date: Date, days: number): Date {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n}\n\n/**\n * Utility functions for working with spaced repetition\n */\nexport const spacedRepetitionUtils = {\n  /**\n   * Format next review time for display\n   */\n  formatNextReview(nextReview: Date): string {\n    const now = new Date();\n    const diffMs = nextReview.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffDays < 0) return '需要复习';\n    if (diffDays === 0) return '今天';\n    if (diffDays === 1) return '明天';\n    if (diffDays < 7) return `${diffDays}天后`;\n    if (diffDays < 30) return `${Math.ceil(diffDays / 7)}周后`;\n    return `${Math.ceil(diffDays / 30)}个月后`;\n  },\n\n  /**\n   * Get color for mastery level display\n   */\n  getMasteryColor(masteryLevel: number): string {\n    if (masteryLevel < 30) return 'text-destructive';\n    if (masteryLevel < 60) return 'text-chart-1';\n    if (masteryLevel < 80) return 'text-chart-3';\n    return 'text-chart-2';\n  },\n\n  /**\n   * Calculate mastery level based on performance history\n   */\n  calculateMasteryLevel(\n    timesStudied: number,\n    timesCorrect: number,\n    recentPerformance: number[] = []\n  ): number {\n    if (timesStudied === 0) return 0;\n\n    // Base accuracy\n    const accuracy = timesCorrect / timesStudied;\n    \n    // Recent performance weight (if available)\n    const recentWeight = recentPerformance.length > 0 \n      ? recentPerformance.reduce((sum, score) => sum + score, 0) / recentPerformance.length / 100\n      : 0;\n\n    // Combine historical and recent performance\n    const weightedAccuracy = recentPerformance.length > 0\n      ? (accuracy * 0.6 + recentWeight * 0.4)\n      : accuracy;\n\n    // Factor in consistency (more studies = higher potential mastery)\n    const consistencyBonus = Math.min(20, timesStudied * 2);\n    \n    const masteryLevel = Math.round(weightedAccuracy * 80 + consistencyBonus);\n    return Math.max(0, Math.min(100, masteryLevel));\n  },\n};\n","size_bytes":8585},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/word-data.ts":{"content":"import type { Word, WordWithProgress, UserProgress } from \"@shared/schema\";\n\n/**\n * Utility functions for word data manipulation and processing\n */\n\nexport interface WordStats {\n  totalWords: number;\n  masteredWords: number;\n  learningWords: number;\n  newWords: number;\n  averageMastery: number;\n}\n\nexport interface StudyMetrics {\n  wordsPerDay: number;\n  averageSessionTime: number;\n  streakDays: number;\n  weeklyProgress: number[];\n}\n\nexport class WordDataProcessor {\n  /**\n   * Calculate comprehensive statistics for words\n   */\n  static calculateWordStats(words: WordWithProgress[]): WordStats {\n    if (words.length === 0) {\n      return {\n        totalWords: 0,\n        masteredWords: 0,\n        learningWords: 0,\n        newWords: 0,\n        averageMastery: 0,\n      };\n    }\n\n    const totalWords = words.length;\n    let masteredWords = 0;\n    let learningWords = 0;\n    let newWords = 0;\n    let totalMastery = 0;\n\n    words.forEach(word => {\n      const masteryLevel = word.progress?.masteryLevel || 0;\n      totalMastery += masteryLevel;\n\n      if (masteryLevel >= 80) {\n        masteredWords++;\n      } else if (masteryLevel > 0) {\n        learningWords++;\n      } else {\n        newWords++;\n      }\n    });\n\n    return {\n      totalWords,\n      masteredWords,\n      learningWords,\n      newWords,\n      averageMastery: Math.round(totalMastery / totalWords),\n    };\n  }\n\n  /**\n   * Group words by difficulty level\n   */\n  static groupWordsByDifficulty(words: Word[]): Record<number, Word[]> {\n    return words.reduce((groups, word) => {\n      const difficulty = word.difficulty;\n      if (!groups[difficulty]) {\n        groups[difficulty] = [];\n      }\n      groups[difficulty].push(word);\n      return groups;\n    }, {} as Record<number, Word[]>);\n  }\n\n  /**\n   * Group words by category\n   */\n  static groupWordsByCategory(words: Word[]): Record<string, Word[]> {\n    return words.reduce((groups, word) => {\n      const category = word.category;\n      if (!groups[category]) {\n        groups[category] = [];\n      }\n      groups[category].push(word);\n      return groups;\n    }, {} as Record<string, Word[]>);\n  }\n\n  /**\n   * Filter words that need review\n   */\n  static getWordsNeedingReview(words: WordWithProgress[]): WordWithProgress[] {\n    const now = new Date();\n    return words.filter(word => {\n      if (!word.progress?.nextReview) return false;\n      return new Date(word.progress.nextReview) <= now;\n    });\n  }\n\n  /**\n   * Get words for new learning session\n   */\n  static getWordsForNewLearning(\n    words: WordWithProgress[], \n    count: number,\n    category?: string\n  ): WordWithProgress[] {\n    let availableWords = words.filter(word => !word.progress || word.progress.masteryLevel === 0);\n    \n    if (category) {\n      availableWords = availableWords.filter(word => word.category === category);\n    }\n\n    // Sort by frequency and difficulty for optimal learning order\n    availableWords.sort((a, b) => {\n      // Prioritize high frequency, low difficulty words\n      const scoreA = a.frequency - a.difficulty;\n      const scoreB = b.frequency - b.difficulty;\n      return scoreB - scoreA;\n    });\n\n    return availableWords.slice(0, count);\n  }\n\n  /**\n   * Generate practice questions from words\n   */\n  static generatePracticeQuestions(\n    words: WordWithProgress[],\n    questionType: 'multiple-choice' | 'fill-blank' | 'translation',\n    count: number = 10\n  ): Array<{\n    word: WordWithProgress;\n    question: string;\n    options?: string[];\n    correctAnswer: string;\n    type: string;\n  }> {\n    const shuffledWords = [...words].sort(() => Math.random() - 0.5).slice(0, count);\n    \n    return shuffledWords.map(word => {\n      switch (questionType) {\n        case 'multiple-choice':\n          const otherWords = words\n            .filter(w => w.id !== word.id)\n            .sort(() => Math.random() - 0.5)\n            .slice(0, 3);\n          \n          const options = [word.chineseDefinition, ...otherWords.map(w => w.chineseDefinition)]\n            .sort(() => Math.random() - 0.5);\n\n          return {\n            word,\n            question: `选择单词 \"${word.word}\" 的正确释义：`,\n            options,\n            correctAnswer: word.chineseDefinition,\n            type: questionType,\n          };\n\n        case 'fill-blank':\n          const sentence = word.englishExample.replace(\n            new RegExp(word.word, 'gi'), \n            '____'\n          );\n          return {\n            word,\n            question: `填空：${sentence}`,\n            correctAnswer: word.word,\n            type: questionType,\n          };\n\n        case 'translation':\n          return {\n            word,\n            question: `请翻译：${word.chineseDefinition}`,\n            correctAnswer: word.word,\n            type: questionType,\n          };\n\n        default:\n          return {\n            word,\n            question: word.word,\n            correctAnswer: word.chineseDefinition,\n            type: questionType,\n          };\n      }\n    });\n  }\n\n  /**\n   * Calculate learning efficiency metrics\n   */\n  static calculateLearningEfficiency(\n    studySessions: Array<{\n      timeSpent: number;\n      wordsLearned: number;\n      accuracy: number;\n      createdAt: Date;\n    }>\n  ): {\n    wordsPerMinute: number;\n    accuracyTrend: number;\n    efficiency: number;\n  } {\n    if (studySessions.length === 0) {\n      return { wordsPerMinute: 0, accuracyTrend: 0, efficiency: 0 };\n    }\n\n    const totalTime = studySessions.reduce((sum, session) => sum + session.timeSpent, 0);\n    const totalWords = studySessions.reduce((sum, session) => sum + session.wordsLearned, 0);\n    const averageAccuracy = studySessions.reduce((sum, session) => sum + session.accuracy, 0) / studySessions.length;\n\n    const wordsPerMinute = totalWords / Math.max(1, totalTime);\n\n    // Calculate accuracy trend (recent vs earlier sessions)\n    const recentSessions = studySessions.slice(-5);\n    const earlierSessions = studySessions.slice(0, -5);\n    \n    const recentAccuracy = recentSessions.length > 0 \n      ? recentSessions.reduce((sum, s) => sum + s.accuracy, 0) / recentSessions.length\n      : averageAccuracy;\n    \n    const earlierAccuracy = earlierSessions.length > 0\n      ? earlierSessions.reduce((sum, s) => sum + s.accuracy, 0) / earlierSessions.length\n      : averageAccuracy;\n\n    const accuracyTrend = recentAccuracy - earlierAccuracy;\n\n    // Overall efficiency score (0-100)\n    const efficiency = Math.round(\n      (wordsPerMinute * 20 + averageAccuracy * 100 + Math.max(0, accuracyTrend) * 50) / 3\n    );\n\n    return {\n      wordsPerMinute: Math.round(wordsPerMinute * 100) / 100,\n      accuracyTrend: Math.round(accuracyTrend * 100) / 100,\n      efficiency: Math.min(100, Math.max(0, efficiency)),\n    };\n  }\n\n  /**\n   * Suggest optimal study plan based on user performance\n   */\n  static suggestStudyPlan(\n    userStats: WordStats,\n    recentPerformance: number[],\n    availableTime: number // minutes per day\n  ): {\n    dailyNewWords: number;\n    dailyReviewWords: number;\n    focusAreas: string[];\n    estimatedCompletionWeeks: number;\n  } {\n    const avgPerformance = recentPerformance.length > 0 \n      ? recentPerformance.reduce((sum, p) => sum + p, 0) / recentPerformance.length\n      : 70;\n\n    // Adjust targets based on performance\n    let dailyNewWords = Math.max(5, Math.min(30, Math.floor(availableTime / 3)));\n    let dailyReviewWords = Math.max(10, Math.min(50, Math.floor(availableTime / 2)));\n\n    if (avgPerformance < 60) {\n      // Struggling - reduce new words, increase review\n      dailyNewWords = Math.max(3, Math.floor(dailyNewWords * 0.7));\n      dailyReviewWords = Math.min(60, Math.floor(dailyReviewWords * 1.3));\n    } else if (avgPerformance > 85) {\n      // Excelling - can handle more new words\n      dailyNewWords = Math.min(40, Math.floor(dailyNewWords * 1.3));\n    }\n\n    // Determine focus areas\n    const focusAreas = [];\n    if (userStats.averageMastery < 60) focusAreas.push('基础词汇巩固');\n    if (avgPerformance < 70) focusAreas.push('复习强化');\n    if (userStats.newWords > userStats.learningWords) focusAreas.push('新词学习');\n    if (focusAreas.length === 0) focusAreas.push('综合提升');\n\n    // Estimate completion time\n    const remainingWords = userStats.newWords + userStats.learningWords;\n    const estimatedCompletionWeeks = Math.ceil(remainingWords / (dailyNewWords * 7));\n\n    return {\n      dailyNewWords,\n      dailyReviewWords,\n      focusAreas,\n      estimatedCompletionWeeks,\n    };\n  }\n\n  /**\n   * Search and filter words with advanced options\n   */\n  static searchWords(\n    words: WordWithProgress[],\n    query: string,\n    filters: {\n      category?: string;\n      difficulty?: number[];\n      masteryRange?: [number, number];\n      partOfSpeech?: string;\n      frequency?: number;\n    } = {}\n  ): WordWithProgress[] {\n    let filtered = words;\n\n    // Text search\n    if (query.trim()) {\n      const searchTerm = query.toLowerCase().trim();\n      filtered = filtered.filter(word =>\n        word.word.toLowerCase().includes(searchTerm) ||\n        word.chineseDefinition.toLowerCase().includes(searchTerm) ||\n        word.phonetic.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Category filter\n    if (filters.category) {\n      filtered = filtered.filter(word => word.category === filters.category);\n    }\n\n    // Difficulty filter\n    if (filters.difficulty && filters.difficulty.length > 0) {\n      filtered = filtered.filter(word => filters.difficulty!.includes(word.difficulty));\n    }\n\n    // Mastery level filter\n    if (filters.masteryRange) {\n      const [min, max] = filters.masteryRange;\n      filtered = filtered.filter(word => {\n        const mastery = word.progress?.masteryLevel || 0;\n        return mastery >= min && mastery <= max;\n      });\n    }\n\n    // Part of speech filter\n    if (filters.partOfSpeech) {\n      filtered = filtered.filter(word => word.partOfSpeech === filters.partOfSpeech);\n    }\n\n    // Frequency filter\n    if (filters.frequency) {\n      filtered = filtered.filter(word => word.frequency >= filters.frequency!);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Export words data for backup or sharing\n   */\n  static exportWordsData(words: WordWithProgress[]): string {\n    const exportData = words.map(word => ({\n      word: word.word,\n      phonetic: word.phonetic,\n      definition: word.chineseDefinition,\n      partOfSpeech: word.partOfSpeech,\n      example: word.englishExample,\n      exampleTranslation: word.chineseExample,\n      category: word.category,\n      difficulty: word.difficulty,\n      mastery: word.progress?.masteryLevel || 0,\n      timesStudied: word.progress?.timesStudied || 0,\n      timesCorrect: word.progress?.timesCorrect || 0,\n    }));\n\n    return JSON.stringify(exportData, null, 2);\n  }\n\n  /**\n   * Generate study recommendations based on forgetting curve\n   */\n  static generateStudyRecommendations(words: WordWithProgress[]): {\n    urgentReview: WordWithProgress[];\n    scheduledReview: WordWithProgress[];\n    reinforcement: WordWithProgress[];\n    maintenance: WordWithProgress[];\n  } {\n    const now = new Date();\n    \n    const urgentReview = words.filter(word => {\n      if (!word.progress?.nextReview) return false;\n      const daysPast = (now.getTime() - new Date(word.progress.nextReview).getTime()) / (1000 * 60 * 60 * 24);\n      return daysPast > 0 && (word.progress.masteryLevel || 0) < 50;\n    });\n\n    const scheduledReview = words.filter(word => {\n      if (!word.progress?.nextReview) return false;\n      const daysPast = (now.getTime() - new Date(word.progress.nextReview).getTime()) / (1000 * 60 * 60 * 24);\n      return daysPast >= 0 && daysPast <= 1 && (word.progress.masteryLevel || 0) >= 50;\n    });\n\n    const reinforcement = words.filter(word => {\n      const mastery = word.progress?.masteryLevel || 0;\n      return mastery > 30 && mastery < 80;\n    });\n\n    const maintenance = words.filter(word => {\n      const mastery = word.progress?.masteryLevel || 0;\n      return mastery >= 80;\n    });\n\n    return {\n      urgentReview: urgentReview.slice(0, 20),\n      scheduledReview: scheduledReview.slice(0, 15),\n      reinforcement: reinforcement.slice(0, 10),\n      maintenance: maintenance.slice(0, 5),\n    };\n  }\n}\n\n/**\n * Predefined word lists for different learning levels\n */\nexport const wordLists = {\n  highFrequency: [\n    'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i',\n    'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at'\n  ],\n  \n  juniorCore: [\n    'beautiful', 'important', 'different', 'wonderful', 'excellent',\n    'interesting', 'difficult', 'popular', 'special', 'successful'\n  ],\n  \n  seniorCore: [\n    'environment', 'experience', 'opportunity', 'knowledge', 'education',\n    'development', 'government', 'technology', 'community', 'organization'\n  ],\n  \n  examFocus: [\n    'analyze', 'evaluate', 'demonstrate', 'illustrate', 'emphasize',\n    'constitute', 'interpret', 'establish', 'framework', 'perspective'\n  ]\n};\n\n/**\n * Common word patterns and roots for vocabulary building\n */\nexport const wordPatterns = {\n  prefixes: {\n    'un-': '不，非',\n    're-': '重新，再',\n    'pre-': '预先，前',\n    'dis-': '不，分离',\n    'mis-': '错误，坏',\n    'over-': '过度，超过',\n    'under-': '不足，在...下',\n    'inter-': '之间，相互',\n    'multi-': '多',\n    'anti-': '反对，抗'\n  },\n  \n  suffixes: {\n    '-tion': '动作，状态',\n    '-ness': '性质，状态',\n    '-ment': '结果，手段',\n    '-able': '能够，适合',\n    '-ful': '充满，具有',\n    '-less': '无，缺乏',\n    '-ly': '以...方式',\n    '-ing': '进行，动名词',\n    '-ed': '过去，被动',\n    '-er': '人，更加'\n  },\n  \n  roots: {\n    'spect': '看',\n    'port': '带，运',\n    'dict': '说',\n    'scrib': '写',\n    'graph': '写，画',\n    'phon': '声音',\n    'photo': '光',\n    'bio': '生命',\n    'geo': '地球',\n    'chron': '时间'\n  }\n};\n","size_bytes":13949},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Flame, Book, Target, Clock } from \"lucide-react\";\nimport type { DashboardStats } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-foreground mb-2\">学习概况</h2>\n        <p className=\"text-muted-foreground\">今天也要加油学习呀！</p>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-muted rounded-lg mb-4\"></div>\n              <div className=\"h-8 bg-muted rounded mb-2\"></div>\n              <div className=\"h-4 bg-muted rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>;\n  }\n\n  if (!stats) {\n    return <div>无法加载数据</div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-foreground mb-2\">学习概况</h2>\n        <p className=\"text-muted-foreground\">今天也要加油学习呀！</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-chart-1 rounded-lg flex items-center justify-center\">\n                <Flame className=\"text-white text-xl\" />\n              </div>\n              <span className=\"text-2xl font-bold study-streak\" data-testid=\"text-streak-days\">\n                {stats.streakDays}\n              </span>\n            </div>\n            <h3 className=\"font-semibold text-card-foreground mb-1\">学习连续天数</h3>\n            <p className=\"text-sm text-muted-foreground\">保持学习节奏</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-chart-2 rounded-lg flex items-center justify-center\">\n                <Book className=\"text-white text-xl\" />\n              </div>\n              <span className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-words-learned\">\n                {stats.totalWordsLearned.toLocaleString()}\n              </span>\n            </div>\n            <h3 className=\"font-semibold text-card-foreground mb-1\">已学单词</h3>\n            <p className=\"text-sm text-muted-foreground\">累计学习量</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-chart-3 rounded-lg flex items-center justify-center\">\n                <Target className=\"text-white text-xl\" />\n              </div>\n              <span className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-mastery-rate\">\n                {stats.masteryRate}%\n              </span>\n            </div>\n            <h3 className=\"font-semibold text-card-foreground mb-1\">掌握率</h3>\n            <p className=\"text-sm text-muted-foreground\">平均正确率</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-chart-4 rounded-lg flex items-center justify-center\">\n                <Clock className=\"text-white text-xl\" />\n              </div>\n              <span className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-study-time\">\n                {stats.todayStudyTime}\n              </span>\n            </div>\n            <h3 className=\"font-semibold text-card-foreground mb-1\">今日学习 (分钟)</h3>\n            <p className=\"text-sm text-muted-foreground\">目标: 30分钟</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Today's Progress */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>今日学习进度</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-card-foreground\">新单词学习</span>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-new-words-progress\">\n                  {stats.todayProgress.newWords.current}/{stats.todayProgress.newWords.target}\n                </span>\n              </div>\n              <Progress \n                value={(stats.todayProgress.newWords.current / stats.todayProgress.newWords.target) * 100} \n                className=\"h-2\"\n                data-testid=\"progress-new-words\"\n              />\n            </div>\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-card-foreground\">复习练习</span>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-review-progress\">\n                  {stats.todayProgress.review.current}/{stats.todayProgress.review.target}\n                </span>\n              </div>\n              <Progress \n                value={(stats.todayProgress.review.current / stats.todayProgress.review.target) * 100} \n                className=\"h-2\"\n                data-testid=\"progress-review\"\n              />\n            </div>\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-card-foreground\">听力练习</span>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-listening-progress\">\n                  {stats.todayProgress.listening.current}/{stats.todayProgress.listening.target}\n                </span>\n              </div>\n              <Progress \n                value={(stats.todayProgress.listening.current / stats.todayProgress.listening.target) * 100} \n                className=\"h-2\"\n                data-testid=\"progress-listening\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>复习提醒</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3 p-3 bg-accent rounded-lg\">\n              <div className=\"w-2 h-2 bg-chart-1 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-accent-foreground\">强化复习</p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-urgent-review\">\n                  {stats.reviewReminders.urgent}个单词待复习\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n              <div className=\"w-2 h-2 bg-chart-2 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-muted-foreground\">常规复习</p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-regular-review\">\n                  {stats.reviewReminders.regular}个单词待复习\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n              <div className=\"w-2 h-2 bg-chart-3 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-muted-foreground\">巩固复习</p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-consolidation-review\">\n                  {stats.reviewReminders.consolidation}个单词待复习\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8509},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/plan.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { StudyPlan } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Plan() {\n  const [dailyWordCount, setDailyWordCount] = useState([20]);\n  const [studyDuration, setStudyDuration] = useState([30]);\n  const [targetCategory, setTargetCategory] = useState(\"junior\");\n  const [reviewStrategy, setReviewStrategy] = useState(\"spaced\");\n  const [studyFocus, setStudyFocus] = useState([\"vocabulary\", \"spelling\", \"context\"]);\n  const [weeklySchedule, setWeeklySchedule] = useState([true, true, true, true, true, true, false]);\n  const [reminderTime, setReminderTime] = useState(\"19:00\");\n  const [reminders, setReminders] = useState({\n    study: true,\n    review: true,\n    report: false,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: activePlan } = useQuery<StudyPlan>({\n    queryKey: [\"/api/study-plans/active\"],\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: async (planData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/study-plans\", planData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"学习计划已保存\", description: \"你的专属学习计划已创建成功\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/study-plans/active\"] });\n    },\n  });\n\n  const handleFocusChange = (focus: string, checked: boolean) => {\n    setStudyFocus(prev => \n      checked \n        ? [...prev, focus]\n        : prev.filter(f => f !== focus)\n    );\n  };\n\n  const handleScheduleChange = (dayIndex: number, checked: boolean) => {\n    setWeeklySchedule(prev => {\n      const newSchedule = [...prev];\n      newSchedule[dayIndex] = checked;\n      return newSchedule;\n    });\n  };\n\n  const savePlan = () => {\n    const planData = {\n      name: `学习计划 - ${new Date().toLocaleDateString()}`,\n      targetCategory,\n      dailyWordCount: dailyWordCount[0],\n      studyDuration: studyDuration[0],\n      reviewStrategy,\n      studyFocus,\n      weeklySchedule,\n      isActive: true,\n    };\n\n    createPlanMutation.mutate(planData);\n  };\n\n  const estimatedCompletion = Math.ceil(1800 / (dailyWordCount[0] * weeklySchedule.filter(Boolean).length * 4));\n  const weeklyStudyTime = (studyDuration[0] * weeklySchedule.filter(Boolean).length) / 60;\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-foreground mb-2\">学习计划</h2>\n        <p className=\"text-muted-foreground\">定制专属的学习计划</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Plan Settings */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>制定学习目标</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"category\" className=\"text-sm font-medium text-card-foreground mb-2 block\">\n                  学习阶段\n                </Label>\n                <Select value={targetCategory} onValueChange={setTargetCategory}>\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"junior\">初中英语</SelectItem>\n                    <SelectItem value=\"senior\">高中英语</SelectItem>\n                    <SelectItem value=\"gaokao\">高考英语</SelectItem>\n                    <SelectItem value=\"custom\">自定义词库</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-card-foreground mb-2 block\">\n                    每日新单词数量\n                  </Label>\n                  <div className=\"flex items-center space-x-3\">\n                    <Slider\n                      value={dailyWordCount}\n                      onValueChange={setDailyWordCount}\n                      max={50}\n                      min={5}\n                      step={5}\n                      className=\"flex-1\"\n                      data-testid=\"slider-word-count\"\n                    />\n                    <span className=\"w-8 text-center font-semibold text-card-foreground\" data-testid=\"text-word-count\">\n                      {dailyWordCount[0]}\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-card-foreground mb-2 block\">\n                    学习时长 (分钟)\n                  </Label>\n                  <div className=\"flex items-center space-x-3\">\n                    <Slider\n                      value={studyDuration}\n                      onValueChange={setStudyDuration}\n                      max={120}\n                      min={10}\n                      step={10}\n                      className=\"flex-1\"\n                      data-testid=\"slider-study-duration\"\n                    />\n                    <span className=\"w-8 text-center font-semibold text-card-foreground\" data-testid=\"text-study-duration\">\n                      {studyDuration[0]}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-card-foreground mb-2 block\">学习重点</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  {[\n                    { id: \"vocabulary\", label: \"词汇记忆\" },\n                    { id: \"spelling\", label: \"拼写练习\" },\n                    { id: \"listening\", label: \"听力训练\" },\n                    { id: \"context\", label: \"语境应用\" },\n                  ].map(focus => (\n                    <label key={focus.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        checked={studyFocus.includes(focus.id)}\n                        onCheckedChange={(checked) => handleFocusChange(focus.id, checked as boolean)}\n                        data-testid={`checkbox-focus-${focus.id}`}\n                      />\n                      <span className=\"text-sm\">{focus.label}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-card-foreground mb-2 block\">复习策略</Label>\n                <RadioGroup value={reviewStrategy} onValueChange={setReviewStrategy}>\n                  <div className=\"space-y-2\">\n                    <label className=\"flex items-center space-x-3\">\n                      <RadioGroupItem value=\"spaced\" data-testid=\"radio-spaced\" />\n                      <span className=\"text-sm\">智能复习 (基于遗忘曲线)</span>\n                    </label>\n                    <label className=\"flex items-center space-x-3\">\n                      <RadioGroupItem value=\"regular\" data-testid=\"radio-regular\" />\n                      <span className=\"text-sm\">定期复习 (每3天)</span>\n                    </label>\n                    <label className=\"flex items-center space-x-3\">\n                      <RadioGroupItem value=\"custom\" data-testid=\"radio-custom\" />\n                      <span className=\"text-sm\">自定义复习时间</span>\n                    </label>\n                  </div>\n                </RadioGroup>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Weekly Schedule */}\n          <Card>\n            <CardHeader>\n              <CardTitle>学习时间安排</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {[\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"].map((day, index) => (\n                  <div key={day} className=\"text-center text-sm font-medium text-muted-foreground p-2\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              <div className=\"grid grid-cols-7 gap-2\">\n                {weeklySchedule.map((isActive, index) => (\n                  <Button\n                    key={index}\n                    variant={isActive ? \"default\" : \"outline\"}\n                    className=\"p-3 text-center text-sm font-medium h-auto\"\n                    onClick={() => handleScheduleChange(index, !isActive)}\n                    data-testid={`button-schedule-${index}`}\n                  >\n                    {isActive ? \"学习\" : \"休息\"}\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Plan Summary */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>计划概览</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">预计完成时间</span>\n                <span className=\"font-semibold text-card-foreground\" data-testid=\"text-estimated-completion\">\n                  {estimatedCompletion}个月\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">总词汇量</span>\n                <span className=\"font-semibold text-card-foreground\">1,800个</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">每周学习时间</span>\n                <span className=\"font-semibold text-card-foreground\" data-testid=\"text-weekly-hours\">\n                  {weeklyStudyTime.toFixed(1)}小时\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">复习频率</span>\n                <span className=\"font-semibold text-card-foreground\">\n                  {reviewStrategy === \"spaced\" ? \"智能复习\" : \n                   reviewStrategy === \"regular\" ? \"定期复习\" : \"自定义复习\"}\n                </span>\n              </div>\n              <Button \n                className=\"w-full mt-6\" \n                onClick={savePlan}\n                disabled={createPlanMutation.isPending}\n                data-testid=\"button-save-plan\"\n              >\n                {createPlanMutation.isPending ? \"保存中...\" : \"保存学习计划\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>学习提醒</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <label className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-card-foreground\">学习提醒</span>\n                <Switch\n                  checked={reminders.study}\n                  onCheckedChange={(checked) => setReminders(prev => ({ ...prev, study: checked }))}\n                  data-testid=\"switch-study-reminder\"\n                />\n              </label>\n              <label className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-card-foreground\">复习提醒</span>\n                <Switch\n                  checked={reminders.review}\n                  onCheckedChange={(checked) => setReminders(prev => ({ ...prev, review: checked }))}\n                  data-testid=\"switch-review-reminder\"\n                />\n              </label>\n              <label className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-card-foreground\">进度报告</span>\n                <Switch\n                  checked={reminders.report}\n                  onCheckedChange={(checked) => setReminders(prev => ({ ...prev, report: checked }))}\n                  data-testid=\"switch-report-reminder\"\n                />\n              </label>\n              <div className=\"mt-4\">\n                <Label htmlFor=\"reminder-time\" className=\"text-sm font-medium text-card-foreground mb-2 block\">\n                  提醒时间\n                </Label>\n                <Input\n                  id=\"reminder-time\"\n                  type=\"time\"\n                  value={reminderTime}\n                  onChange={(e) => setReminderTime(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-reminder-time\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13592},"client/src/pages/practice.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ListChecks, Edit, Languages, Headphones, Volume2, Clock, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WordWithProgress } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype PracticeMode = \"multiple-choice\" | \"fill-blank\" | \"translation\" | \"listening\";\n\ninterface PracticeQuestion {\n  word: WordWithProgress;\n  question: string;\n  options?: string[];\n  correctAnswer: string;\n  type: PracticeMode;\n}\n\nexport default function Practice() {\n  const [selectedMode, setSelectedMode] = useState<PracticeMode | null>(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);\n  const [score, setScore] = useState(0);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [questions, setQuestions] = useState<PracticeQuestion[]>([]);\n  const { toast } = useToast();\n\n  const { data: words, isLoading } = useQuery<WordWithProgress[]>({\n    queryKey: [\"/api/words\"],\n    select: (data) => data.slice(0, 10), // Get 10 words for practice\n  });\n\n  const savePracticeResultMutation = useMutation({\n    mutationFn: async (result: any) => {\n      const response = await apiRequest(\"POST\", \"/api/practice-results\", result);\n      return response.json();\n    },\n  });\n\n  const generateQuestions = (words: WordWithProgress[], mode: PracticeMode): PracticeQuestion[] => {\n    return words.map(word => {\n      switch (mode) {\n        case \"multiple-choice\":\n          const otherWords = words.filter(w => w.id !== word.id).slice(0, 3);\n          const options = [word.chineseDefinition, ...otherWords.map(w => w.chineseDefinition)];\n          return {\n            word,\n            question: `选择单词 \"${word.word}\" 的正确释义：`,\n            options: options.sort(() => Math.random() - 0.5),\n            correctAnswer: word.chineseDefinition,\n            type: mode,\n          };\n        case \"translation\":\n          return {\n            word,\n            question: `请翻译：${word.chineseDefinition}`,\n            correctAnswer: word.word,\n            type: mode,\n          };\n        case \"fill-blank\":\n          const sentence = word.englishExample.replace(new RegExp(word.word, 'gi'), '____');\n          return {\n            word,\n            question: `填空：${sentence}`,\n            correctAnswer: word.word,\n            type: mode,\n          };\n        case \"listening\":\n          return {\n            word,\n            question: \"听音选词，选择正确的单词：\",\n            options: [word.word, ...words.filter(w => w.id !== word.id).slice(0, 3).map(w => w.word)].sort(() => Math.random() - 0.5),\n            correctAnswer: word.word,\n            type: mode,\n          };\n        default:\n          return {\n            word,\n            question: word.word,\n            correctAnswer: word.chineseDefinition,\n            type: mode,\n          };\n      }\n    });\n  };\n\n  const startPractice = (mode: PracticeMode) => {\n    if (!words) return;\n    \n    setSelectedMode(mode);\n    const practiceQuestions = generateQuestions(words, mode);\n    setQuestions(practiceQuestions);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n  };\n\n  const selectAnswer = (answer: string) => {\n    if (isAnswered) return;\n    \n    setSelectedAnswer(answer);\n    setIsAnswered(true);\n    \n    const currentQuestion = questions[currentQuestionIndex];\n    const isCorrect = answer === currentQuestion.correctAnswer;\n    \n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    // Save practice result\n    savePracticeResultMutation.mutate({\n      sessionId: \"temp-session\", // In a real app, you'd have a proper session ID\n      wordId: currentQuestion.word.id,\n      exerciseType: currentQuestion.type,\n      isCorrect,\n      userAnswer: answer,\n      correctAnswer: currentQuestion.correctAnswer,\n      timeSpent: 10, // Default time, in a real app you'd track actual time\n    });\n\n    toast({\n      title: isCorrect ? \"正确！\" : \"不正确\",\n      description: isCorrect ? \"继续保持！\" : `正确答案是：${currentQuestion.correctAnswer}`,\n    });\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setSelectedAnswer(null);\n      setIsAnswered(false);\n    } else {\n      // Practice session completed\n      toast({\n        title: \"练习完成！\",\n        description: `得分：${score}/${questions.length}`,\n      });\n      setSelectedMode(null);\n    }\n  };\n\n  const playWord = () => {\n    if ('speechSynthesis' in window && questions[currentQuestionIndex]) {\n      const utterance = new SpeechSynthesisUtterance(questions[currentQuestionIndex].word.word);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">练单词</h2>\n          <p className=\"text-muted-foreground\">通过多种练习模式巩固记忆</p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-muted rounded-lg mb-4\"></div>\n                <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                <div className=\"h-4 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!selectedMode) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">练单词</h2>\n          <p className=\"text-muted-foreground\">通过多种练习模式巩固记忆</p>\n        </div>\n\n        {/* Practice Mode Selection */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card \n            className=\"cursor-pointer hover:border-primary transition-colors group\" \n            onClick={() => startPractice(\"multiple-choice\")}\n            data-testid=\"card-multiple-choice\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-chart-1 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <ListChecks className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-card-foreground mb-2\">选择题练习</h3>\n              <p className=\"text-sm text-muted-foreground\">从多个选项中选择正确答案</p>\n            </CardContent>\n          </Card>\n\n          <Card \n            className=\"cursor-pointer hover:border-primary transition-colors group\" \n            onClick={() => startPractice(\"fill-blank\")}\n            data-testid=\"card-fill-blank\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-chart-2 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Edit className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-card-foreground mb-2\">填空练习</h3>\n              <p className=\"text-sm text-muted-foreground\">根据上下文填入正确单词</p>\n            </CardContent>\n          </Card>\n\n          <Card \n            className=\"cursor-pointer hover:border-primary transition-colors group\" \n            onClick={() => startPractice(\"translation\")}\n            data-testid=\"card-translation\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-chart-3 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Languages className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-card-foreground mb-2\">翻译练习</h3>\n              <p className=\"text-sm text-muted-foreground\">英译中和中译英互动练习</p>\n            </CardContent>\n          </Card>\n\n          <Card \n            className=\"cursor-pointer hover:border-primary transition-colors group\" \n            onClick={() => startPractice(\"listening\")}\n            data-testid=\"card-listening\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-chart-4 rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <Headphones className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-card-foreground mb-2\">听力练习</h3>\n              <p className=\"text-sm text-muted-foreground\">听音选词和听写练习</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-foreground mb-2\">练单词</h2>\n        <p className=\"text-muted-foreground\">通过多种练习模式巩固记忆</p>\n      </div>\n\n      {/* Practice Interface */}\n      <Card className=\"border border-border\">\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle data-testid=\"text-practice-mode\">\n                {selectedMode === \"multiple-choice\" && \"选择题练习\"}\n                {selectedMode === \"fill-blank\" && \"填空练习\"}\n                {selectedMode === \"translation\" && \"翻译练习\"}\n                {selectedMode === \"listening\" && \"听力练习\"}\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-question-progress\">\n                第 {currentQuestionIndex + 1} 题 / 共 {questions.length} 题\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">02:45</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Star className=\"h-4 w-4 text-chart-3\" />\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-current-score\">\n                  {score}分\n                </span>\n              </div>\n            </div>\n          </div>\n          <Progress value={progress} className=\"h-2 mt-4\" data-testid=\"progress-practice\" />\n        </CardHeader>\n\n        <CardContent className=\"p-8\">\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"text-center mb-8\">\n              <h4 className=\"text-2xl font-semibold text-card-foreground mb-4\" data-testid=\"text-question\">\n                {currentQuestion.question}\n              </h4>\n              {selectedMode === \"listening\" && (\n                <Button onClick={playWord} data-testid=\"button-play-listening\">\n                  <Volume2 className=\"h-6 w-6\" />\n                </Button>\n              )}\n            </div>\n\n            {currentQuestion.options ? (\n              <div className=\"space-y-4\">\n                {currentQuestion.options.map((option, index) => {\n                  const letter = String.fromCharCode(65 + index);\n                  const isSelected = selectedAnswer === option;\n                  const isCorrect = option === currentQuestion.correctAnswer;\n                  \n                  return (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      className={`w-full p-4 text-left justify-start h-auto border-2 transition-colors ${\n                        isAnswered && isSelected && isCorrect ? \"border-chart-2 bg-chart-2/10\" :\n                        isAnswered && isSelected && !isCorrect ? \"border-destructive bg-destructive/10\" :\n                        isAnswered && isCorrect ? \"border-chart-2 bg-chart-2/10\" :\n                        isSelected ? \"border-primary bg-primary/10\" : \"border-transparent hover:border-primary\"\n                      }`}\n                      onClick={() => selectAnswer(option)}\n                      disabled={isAnswered}\n                      data-testid={`button-option-${letter}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"flex-shrink-0 w-8 h-8 bg-card rounded-full flex items-center justify-center font-semibold\">\n                          {letter}\n                        </span>\n                        <span>{option}</span>\n                      </div>\n                    </Button>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <input\n                  type=\"text\"\n                  placeholder=\"请输入答案...\"\n                  className=\"w-full p-4 border border-border rounded-lg text-foreground bg-input\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      selectAnswer((e.target as HTMLInputElement).value);\n                    }\n                  }}\n                  disabled={isAnswered}\n                  data-testid=\"input-answer\"\n                />\n              </div>\n            )}\n\n            <div className=\"flex justify-between items-center mt-8\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setSelectedMode(null)}\n                data-testid=\"button-back-to-modes\"\n              >\n                返回模式选择\n              </Button>\n              <Button \n                onClick={nextQuestion} \n                disabled={!isAnswered}\n                data-testid=\"button-next-question\"\n              >\n                {currentQuestionIndex < questions.length - 1 ? \"下一题\" : \"完成练习\"}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14666},"client/src/pages/study.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight, Volume2, Plus, Bookmark, Share2, X, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WordWithProgress } from \"@shared/schema\";\nimport WordCard from \"@/components/word-card.tsx\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Study() {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: words, isLoading } = useQuery<WordWithProgress[]>({\n    queryKey: [\"/api/words\"],\n    select: (data) => data.slice(0, 20), // Limit to 20 words for study session\n  });\n\n  const updateProgressMutation = useMutation({\n    mutationFn: async ({ wordId, updates }: { wordId: string; updates: any }) => {\n      const response = await apiRequest(\"POST\", `/api/progress/${wordId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/words\"] });\n    },\n  });\n\n  const addToVocabularyMutation = useMutation({\n    mutationFn: async (wordId: string) => {\n      const response = await apiRequest(\"POST\", `/api/words/${wordId}/add-to-vocabulary`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"已添加到生词本\", description: \"单词已成功添加到生词本\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vocabulary-book\"] });\n    },\n  });\n\n  const toggleStarMutation = useMutation({\n    mutationFn: async (wordId: string) => {\n      const response = await apiRequest(\"POST\", `/api/words/${wordId}/star`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"标记状态已更新\", description: \"单词标记状态已更新\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/words\"] });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">记单词</h2>\n          <p className=\"text-muted-foreground\">通过单词卡片学习新单词</p>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Card className=\"animate-pulse\">\n              <CardContent className=\"h-96 flex items-center justify-center\">\n                <div className=\"w-32 h-32 bg-muted rounded-full\"></div>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"space-y-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!words || words.length === 0) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">记单词</h2>\n          <p className=\"text-muted-foreground\">通过单词卡片学习新单词</p>\n        </div>\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\">暂无单词可学习</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const currentWord = words[currentWordIndex];\n  const progress = (currentWordIndex + 1) / words.length * 100;\n\n  const nextWord = () => {\n    if (currentWordIndex < words.length - 1) {\n      setCurrentWordIndex(currentWordIndex + 1);\n    }\n  };\n\n  const previousWord = () => {\n    if (currentWordIndex > 0) {\n      setCurrentWordIndex(currentWordIndex - 1);\n    }\n  };\n\n  const markKnown = () => {\n    updateProgressMutation.mutate({\n      wordId: currentWord.id,\n      updates: {\n        masteryLevel: Math.min(100, (currentWord.progress?.masteryLevel || 0) + 20),\n        timesStudied: (currentWord.progress?.timesStudied || 0) + 1,\n        timesCorrect: (currentWord.progress?.timesCorrect || 0) + 1,\n        lastStudied: new Date(),\n      },\n    });\n    toast({ title: \"标记为已掌握\", description: \"单词掌握度已提升\" });\n    nextWord();\n  };\n\n  const markDifficult = () => {\n    updateProgressMutation.mutate({\n      wordId: currentWord.id,\n      updates: {\n        masteryLevel: Math.max(0, (currentWord.progress?.masteryLevel || 0) - 10),\n        timesStudied: (currentWord.progress?.timesStudied || 0) + 1,\n        lastStudied: new Date(),\n      },\n    });\n    toast({ title: \"标记为困难\", description: \"将安排更多复习\" });\n    nextWord();\n  };\n\n  const playAudio = () => {\n    // In a real app, this would use the Web Speech API or audio files\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(currentWord.word);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-foreground mb-2\">记单词</h2>\n        <p className=\"text-muted-foreground\">通过单词卡片学习新单词</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Word Card */}\n        <div className=\"lg:col-span-2\">\n          <WordCard word={currentWord} onPlayAudio={playAudio} />\n\n          {/* Word Navigation */}\n          <div className=\"flex justify-between items-center mt-6\">\n            <Button \n              variant=\"outline\" \n              onClick={previousWord} \n              disabled={currentWordIndex === 0}\n              data-testid=\"button-previous-word\"\n            >\n              <ChevronLeft className=\"mr-2 h-4 w-4\" />\n              上一个\n            </Button>\n            \n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"destructive\" \n                size=\"icon\" \n                onClick={markDifficult}\n                data-testid=\"button-mark-difficult\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                className=\"bg-chart-2 hover:bg-chart-2/90 text-white\" \n                size=\"icon\" \n                onClick={markKnown}\n                data-testid=\"button-mark-known\"\n              >\n                <Check className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            <Button \n              variant=\"default\" \n              onClick={nextWord} \n              disabled={currentWordIndex === words.length - 1}\n              data-testid=\"button-next-word\"\n            >\n              下一个\n              <ChevronRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Study Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Progress Card */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">学习进度</h3>\n              <div className=\"relative mb-4\">\n                <svg className=\"progress-circle w-24 h-24 mx-auto\" viewBox=\"0 0 36 36\">\n                  <path \n                    className=\"text-muted\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"3\"\n                    d=\"M18 2.0845a 15.9155 15.9155 0 0 1 0 31.831a 15.9155 15.9155 0 0 1 0 -31.831\"\n                  />\n                  <path \n                    className=\"text-primary\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"3\" \n                    strokeDasharray={`${progress}, 100`}\n                    d=\"M18 2.0845a 15.9155 15.9155 0 0 1 0 31.831a 15.9155 15.9155 0 0 1 0 -31.831\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-progress-percentage\">\n                    {Math.round(progress)}%\n                  </span>\n                </div>\n              </div>\n              <p className=\"text-center text-muted-foreground text-sm\" data-testid=\"text-progress-words\">\n                已学习 {currentWordIndex + 1}/{words.length} 个单词\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">快捷操作</h3>\n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full justify-start\" \n                  onClick={() => addToVocabularyMutation.mutate(currentWord.id)}\n                  data-testid=\"button-add-vocabulary\"\n                >\n                  <Plus className=\"mr-3 h-4 w-4\" />\n                  添加到生词本\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\" \n                  onClick={() => toggleStarMutation.mutate(currentWord.id)}\n                  data-testid=\"button-toggle-star\"\n                >\n                  <Bookmark className=\"mr-3 h-4 w-4\" />\n                  标记重点\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  data-testid=\"button-share-word\"\n                >\n                  <Share2 className=\"mr-3 h-4 w-4\" />\n                  分享单词\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Word List */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">今日单词列表</h3>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {words.map((word, index) => (\n                  <div \n                    key={word.id} \n                    className={`flex items-center justify-between p-2 rounded transition-colors cursor-pointer ${\n                      index === currentWordIndex ? \"bg-primary/10\" : \"hover:bg-muted\"\n                    }`}\n                    onClick={() => setCurrentWordIndex(index)}\n                    data-testid={`word-list-item-${index}`}\n                  >\n                    <span className=\"text-sm text-card-foreground\">{word.word}</span>\n                    <div className={`w-2 h-2 rounded-full ${\n                      (word.progress?.masteryLevel || 0) > 70 ? \"bg-chart-2\" : \n                      (word.progress?.masteryLevel || 0) > 30 ? \"bg-chart-1\" : \"bg-muted\"\n                    }`}></div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11280},"client/src/pages/wordbank.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Search, Filter, Volume2, Edit, Star, Trash2, ChevronLeft, ChevronRight, Plus, BookPlus, Upload, FileText, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WordWithProgress } from \"@shared/schema\";\nimport { insertWordSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ntype WordCategory = \"all\" | \"junior\" | \"senior\" | \"vocabulary-book\" | \"starred\" | \"mastered\";\ntype SortOption = \"alphabetical\" | \"date-added\" | \"mastery\" | \"review-time\";\n\nconst addWordSchema = insertWordSchema.extend({\n  difficulty: z.coerce.number().min(1).max(5),\n  frequency: z.coerce.number().min(1).max(10),\n});\n\nexport default function WordBank() {\n  const [selectedCategory, setSelectedCategory] = useState<WordCategory>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState<SortOption>(\"alphabetical\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [showAddWordDialog, setShowAddWordDialog] = useState(false);\n  const [showImportDialog, setShowImportDialog] = useState(false);\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importProgress, setImportProgress] = useState({ processed: 0, total: 0, errors: [] as string[] });\n  const wordsPerPage = 20;\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form for adding new words\n  const addWordForm = useForm<z.infer<typeof addWordSchema>>({\n    resolver: zodResolver(addWordSchema),\n    defaultValues: {\n      word: \"\",\n      phonetic: \"\",\n      partOfSpeech: \"noun\",\n      chineseDefinition: \"\",\n      englishExample: \"\",\n      chineseExample: \"\",\n      difficulty: 1,\n      category: \"general\",\n      frequency: 1,\n    },\n  });\n\n  // Fetch words based on category\n  const getWordsQuery = () => {\n    switch (selectedCategory) {\n      case \"vocabulary-book\":\n        return [\"/api/vocabulary-book\"];\n      case \"starred\":\n        return [\"/api/starred-words\"];\n      case \"junior\":\n        return [\"/api/words\", { category: \"junior\" }];\n      case \"senior\":\n        return [\"/api/words\", { category: \"senior\" }];\n      default:\n        return [\"/api/words\"];\n    }\n  };\n\n  const { data: allWords, isLoading } = useQuery<WordWithProgress[]>({\n    queryKey: getWordsQuery(),\n  });\n\n  const toggleStarMutation = useMutation({\n    mutationFn: async (wordId: string) => {\n      const response = await apiRequest(\"POST\", `/api/words/${wordId}/star`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"标记状态已更新\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/words\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/starred-words\"] });\n    },\n  });\n\n  const addToVocabularyMutation = useMutation({\n    mutationFn: async (wordId: string) => {\n      const response = await apiRequest(\"POST\", `/api/words/${wordId}/add-to-vocabulary`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"已添加到生词本\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vocabulary-book\"] });\n    },\n  });\n\n  const createWordMutation = useMutation({\n    mutationFn: async (wordData: z.infer<typeof addWordSchema>) => {\n      const response = await apiRequest(\"POST\", `/api/words`, wordData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"单词创建成功！\", description: \"新单词已添加到词库中。\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/words\"] });\n      setShowAddWordDialog(false);\n      addWordForm.reset();\n    },\n    onError: (error) => {\n      toast({ \n        title: \"创建失败\", \n        description: \"添加单词时出现错误，请检查输入的信息。\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmitWord = (data: z.infer<typeof addWordSchema>) => {\n    createWordMutation.mutate(data);\n  };\n\n  const importWordsMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await apiRequest(\"POST\", `/api/words/import`, formData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({ \n        title: \"导入完成！\", \n        description: `成功导入 ${data.success} 个单词，${data.failed} 个失败。` \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/words\"] });\n      setShowImportDialog(false);\n      setImportFile(null);\n      setImportProgress({ processed: 0, total: 0, errors: [] });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"导入失败\", \n        description: \"文件导入时出现错误，请检查文件格式。\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleFileImport = () => {\n    if (!importFile) return;\n    \n    const formData = new FormData();\n    formData.append('file', importFile);\n    importWordsMutation.mutate(formData);\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && (file.type === 'text/csv' || file.type === 'application/json' || file.name.endsWith('.csv') || file.name.endsWith('.json'))) {\n      setImportFile(file);\n    } else {\n      toast({\n        title: \"文件格式错误\",\n        description: \"请选择CSV或JSON格式的文件。\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const downloadTemplate = (format: 'csv' | 'json') => {\n    const sampleData = format === 'csv' \n      ? `word,phonetic,partOfSpeech,chineseDefinition,englishExample,chineseExample,difficulty,category,frequency\nbeautiful,/ˈbjuːtɪfʊl/,adjective,美丽的；漂亮的,She is a beautiful girl.,她是一个漂亮的女孩。,2,junior,5\nexcellent,/ˈeksələnt/,adjective,优秀的；杰出的,He did an excellent job.,他做得很出色。,3,senior,4`\n      : JSON.stringify([\n          {\n            word: \"beautiful\",\n            phonetic: \"/ˈbjuːtɪfʊl/\",\n            partOfSpeech: \"adjective\",\n            chineseDefinition: \"美丽的；漂亮的\",\n            englishExample: \"She is a beautiful girl.\",\n            chineseExample: \"她是一个漂亮的女孩。\",\n            difficulty: 2,\n            category: \"junior\",\n            frequency: 5\n          },\n          {\n            word: \"excellent\",\n            phonetic: \"/ˈeksələnt/\",\n            partOfSpeech: \"adjective\", \n            chineseDefinition: \"优秀的；杰出的\",\n            englishExample: \"He did an excellent job.\",\n            chineseExample: \"他做得很出色。\",\n            difficulty: 3,\n            category: \"senior\",\n            frequency: 4\n          }\n        ], null, 2);\n\n    const blob = new Blob([sampleData], { type: format === 'csv' ? 'text/csv' : 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `word_template.${format}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Filter and sort words\n  const filteredWords = allWords?.filter(word => {\n    const matchesSearch = searchQuery === \"\" || \n      word.word.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      word.chineseDefinition.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = selectedCategory === \"all\" || \n      (selectedCategory === \"mastered\" && (word.progress?.masteryLevel || 0) > 80) ||\n      (selectedCategory !== \"mastered\" && selectedCategory !== \"vocabulary-book\" && selectedCategory !== \"starred\");\n    \n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  const sortedWords = [...filteredWords].sort((a, b) => {\n    switch (sortBy) {\n      case \"alphabetical\":\n        return a.word.localeCompare(b.word);\n      case \"mastery\":\n        return (b.progress?.masteryLevel || 0) - (a.progress?.masteryLevel || 0);\n      case \"review-time\":\n        if (!a.progress?.nextReview || !b.progress?.nextReview) return 0;\n        return new Date(a.progress.nextReview).getTime() - new Date(b.progress.nextReview).getTime();\n      default:\n        return 0;\n    }\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(sortedWords.length / wordsPerPage);\n  const startIndex = (currentPage - 1) * wordsPerPage;\n  const paginatedWords = sortedWords.slice(startIndex, startIndex + wordsPerPage);\n\n  const playAudio = (word: string) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(word);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const formatNextReview = (nextReview: Date | null | undefined) => {\n    if (!nextReview) return \"未安排\";\n    const now = new Date();\n    const review = new Date(nextReview);\n    const diffDays = Math.ceil((review.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) return \"需要复习\";\n    if (diffDays === 0) return \"今天\";\n    if (diffDays === 1) return \"明天\";\n    return `${diffDays}天后`;\n  };\n\n  const getCategoryStats = () => {\n    if (!allWords) return {};\n    \n    return {\n      all: allWords.length,\n      junior: allWords.filter(w => w.category === \"junior\").length,\n      senior: allWords.filter(w => w.category === \"senior\").length,\n      \"vocabulary-book\": allWords.filter(w => w.progress?.isInVocabularyBook).length,\n      starred: allWords.filter(w => w.progress?.isStarred).length,\n      mastered: allWords.filter(w => (w.progress?.masteryLevel || 0) > 80).length,\n    };\n  };\n\n  const stats = getCategoryStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">单词库管理</h2>\n          <p className=\"text-muted-foreground\">管理和组织你的单词集合</p>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          <Card className=\"animate-pulse\">\n            <CardContent className=\"p-6 space-y-4\">\n              <div className=\"h-6 bg-muted rounded\"></div>\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-10 bg-muted rounded\"></div>\n              ))}\n            </CardContent>\n          </Card>\n          <div className=\"lg:col-span-3\">\n            <Card className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-96 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">单词库管理</h2>\n            <p className=\"text-muted-foreground\">管理和组织你的单词集合</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Dialog open={showAddWordDialog} onOpenChange={setShowAddWordDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-word\" className=\"learning-card-gradient text-white\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  录入单词\n                </Button>\n              </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold\">手工录入单词</DialogTitle>\n              </DialogHeader>\n              <Form {...addWordForm}>\n                <form onSubmit={addWordForm.handleSubmit(onSubmitWord)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={addWordForm.control}\n                      name=\"word\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>英文单词 *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"请输入英文单词\" {...field} data-testid=\"input-word\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={addWordForm.control}\n                      name=\"phonetic\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>音标 *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"如: /ˈbjuːtɪfʊl/\" {...field} data-testid=\"input-phonetic\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={addWordForm.control}\n                      name=\"partOfSpeech\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>词性 *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-pos\">\n                                <SelectValue placeholder=\"选择词性\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"noun\">名词</SelectItem>\n                              <SelectItem value=\"verb\">动词</SelectItem>\n                              <SelectItem value=\"adjective\">形容词</SelectItem>\n                              <SelectItem value=\"adverb\">副词</SelectItem>\n                              <SelectItem value=\"preposition\">介词</SelectItem>\n                              <SelectItem value=\"pronoun\">代词</SelectItem>\n                              <SelectItem value=\"conjunction\">连词</SelectItem>\n                              <SelectItem value=\"interjection\">感叹词</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={addWordForm.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>分类</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-category\">\n                                <SelectValue placeholder=\"选择分类\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"general\">通用</SelectItem>\n                              <SelectItem value=\"junior\">初中</SelectItem>\n                              <SelectItem value=\"senior\">高中</SelectItem>\n                              <SelectItem value=\"advanced\">高级</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={addWordForm.control}\n                      name=\"difficulty\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>难度级别 (1-5)</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value.toString()}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-difficulty\">\n                                <SelectValue placeholder=\"选择难度\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"1\">1 - 简单</SelectItem>\n                              <SelectItem value=\"2\">2 - 较简单</SelectItem>\n                              <SelectItem value=\"3\">3 - 中等</SelectItem>\n                              <SelectItem value=\"4\">4 - 较难</SelectItem>\n                              <SelectItem value=\"5\">5 - 困难</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={addWordForm.control}\n                    name=\"chineseDefinition\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>中文释义 *</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"请输入中文释义\"\n                            className=\"min-h-[80px]\"\n                            {...field}\n                            data-testid=\"input-chinese-definition\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addWordForm.control}\n                    name=\"englishExample\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>英文例句 *</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"请输入英文例句\"\n                            className=\"min-h-[80px]\"\n                            {...field}\n                            data-testid=\"input-english-example\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addWordForm.control}\n                    name=\"chineseExample\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>中文例句 *</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"请输入中文例句\"\n                            className=\"min-h-[80px]\"\n                            {...field}\n                            data-testid=\"input-chinese-example\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3 pt-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setShowAddWordDialog(false)}\n                      data-testid=\"button-cancel-add-word\"\n                    >\n                      取消\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createWordMutation.isPending}\n                      data-testid=\"button-submit-add-word\"\n                    >\n                      {createWordMutation.isPending ? \"添加中...\" : \"添加单词\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n            </Dialog>\n\n            <Dialog open={showImportDialog} onOpenChange={setShowImportDialog}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" data-testid=\"button-import-words\">\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  批量导入\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-lg\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-xl font-bold\">批量导入单词</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-6\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      支持CSV和JSON格式文件。请先下载模板文件，按照格式填写单词数据。\n                    </p>\n                    \n                    <div className=\"flex gap-2 mb-4\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => downloadTemplate('csv')}\n                        data-testid=\"button-download-csv-template\"\n                      >\n                        <FileText className=\"mr-2 h-4 w-4\" />\n                        CSV模板\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => downloadTemplate('json')}\n                        data-testid=\"button-download-json-template\"\n                      >\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        JSON模板\n                      </Button>\n                    </div>\n\n                    <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                      <input\n                        type=\"file\"\n                        accept=\".csv,.json\"\n                        onChange={handleFileChange}\n                        className=\"hidden\"\n                        id=\"file-upload\"\n                        data-testid=\"input-file-upload\"\n                      />\n                      <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                        <Upload className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                        <p className=\"text-sm text-muted-foreground\">\n                          点击选择文件或拖拽文件到此处\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          支持 CSV、JSON 格式\n                        </p>\n                      </label>\n                    </div>\n\n                    {importFile && (\n                      <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n                        <p className=\"text-sm font-medium\">已选择文件:</p>\n                        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-file\">\n                          {importFile.name} ({(importFile.size / 1024).toFixed(1)} KB)\n                        </p>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setShowImportDialog(false);\n                        setImportFile(null);\n                      }}\n                      data-testid=\"button-cancel-import\"\n                    >\n                      取消\n                    </Button>\n                    <Button \n                      onClick={handleFileImport}\n                      disabled={!importFile || importWordsMutation.isPending}\n                      data-testid=\"button-submit-import\"\n                    >\n                      {importWordsMutation.isPending ? \"导入中...\" : \"开始导入\"}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n        {/* Word Bank Categories */}\n        <Card>\n          <CardHeader>\n            <CardTitle>单词库分类</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {[\n              { key: \"all\" as WordCategory, label: \"全部单词\", count: stats.all },\n              { key: \"junior\" as WordCategory, label: \"初中词汇\", count: stats.junior },\n              { key: \"senior\" as WordCategory, label: \"高中词汇\", count: stats.senior },\n              { key: \"vocabulary-book\" as WordCategory, label: \"我的生词本\", count: stats[\"vocabulary-book\"] },\n              { key: \"starred\" as WordCategory, label: \"重点词汇\", count: stats.starred },\n              { key: \"mastered\" as WordCategory, label: \"已掌握\", count: stats.mastered },\n            ].map(category => (\n              <Button\n                key={category.key}\n                variant={selectedCategory === category.key ? \"default\" : \"ghost\"}\n                className=\"w-full justify-between\"\n                onClick={() => {\n                  setSelectedCategory(category.key);\n                  setCurrentPage(1);\n                }}\n                data-testid={`button-category-${category.key}`}\n              >\n                <span>{category.label}</span>\n                <span className=\"text-sm\" data-testid={`text-count-${category.key}`}>\n                  {category.count || 0}\n                </span>\n              </Button>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Word List */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            {/* Search and Filter */}\n            <CardHeader className=\"border-b border-border\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex-1 relative\">\n                  <Input\n                    placeholder=\"搜索单词...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-words\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                </div>\n                <Select value={sortBy} onValueChange={(value: SortOption) => setSortBy(value)}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-sort-by\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"alphabetical\">按字母排序</SelectItem>\n                    <SelectItem value=\"date-added\">按添加时间</SelectItem>\n                    <SelectItem value=\"mastery\">按掌握程度</SelectItem>\n                    <SelectItem value=\"review-time\">按复习时间</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" data-testid=\"button-filter\">\n                  <Filter className=\"mr-2 h-4 w-4\" />\n                  筛选\n                </Button>\n              </div>\n            </CardHeader>\n\n            {/* Word List Table */}\n            <CardContent className=\"p-0\">\n              {paginatedWords.length === 0 ? (\n                <div className=\"p-8 text-center text-muted-foreground\">\n                  {searchQuery ? \"没有找到匹配的单词\" : \"此分类下暂无单词\"}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"text-left p-4 font-medium text-muted-foreground\">单词</th>\n                        <th className=\"text-left p-4 font-medium text-muted-foreground\">释义</th>\n                        <th className=\"text-left p-4 font-medium text-muted-foreground\">词性</th>\n                        <th className=\"text-left p-4 font-medium text-muted-foreground\">掌握程度</th>\n                        <th className=\"text-left p-4 font-medium text-muted-foreground\">复习时间</th>\n                        <th className=\"text-left p-4 font-medium text-muted-foreground\">操作</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {paginatedWords.map((word) => (\n                        <tr key={word.id} className=\"hover:bg-muted/50 transition-colors\">\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => playAudio(word.word)}\n                                data-testid={`button-play-${word.id}`}\n                              >\n                                <Volume2 className=\"h-4 w-4\" />\n                              </Button>\n                              <div>\n                                <div className=\"font-medium text-card-foreground\" data-testid={`text-word-${word.id}`}>\n                                  {word.word}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\" data-testid={`text-phonetic-${word.id}`}>\n                                  {word.phonetic}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4 text-card-foreground max-w-xs truncate\" data-testid={`text-definition-${word.id}`}>\n                            {word.chineseDefinition}\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"secondary\" data-testid={`badge-pos-${word.id}`}>\n                              {word.partOfSpeech}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-16 bg-muted rounded-full h-2\">\n                                <div \n                                  className=\"bg-chart-2 h-2 rounded-full transition-all\" \n                                  style={{ width: `${word.progress?.masteryLevel || 0}%` }}\n                                ></div>\n                              </div>\n                              <span className=\"text-sm text-muted-foreground\" data-testid={`text-mastery-${word.id}`}>\n                                {word.progress?.masteryLevel || 0}%\n                              </span>\n                            </div>\n                          </td>\n                          <td className=\"p-4 text-sm text-muted-foreground\" data-testid={`text-review-${word.id}`}>\n                            {formatNextReview(word.progress?.nextReview)}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => addToVocabularyMutation.mutate(word.id)}\n                                data-testid={`button-edit-${word.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => toggleStarMutation.mutate(word.id)}\n                                className={word.progress?.isStarred ? \"text-chart-3\" : \"\"}\n                                data-testid={`button-star-${word.id}`}\n                              >\n                                <Star className={`h-4 w-4 ${word.progress?.isStarred ? \"fill-current\" : \"\"}`} />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-destructive hover:text-destructive\"\n                                data-testid={`button-delete-${word.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"p-6 border-t border-border flex justify-between items-center\">\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                    显示第 {startIndex + 1}-{Math.min(startIndex + wordsPerPage, sortedWords.length)} 项，共 {sortedWords.length} 项\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage === 1}\n                      data-testid=\"button-prev-page\"\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    {[...Array(Math.min(5, totalPages))].map((_, index) => {\n                      let pageNum;\n                      if (totalPages <= 5) {\n                        pageNum = index + 1;\n                      } else if (currentPage <= 3) {\n                        pageNum = index + 1;\n                      } else if (currentPage >= totalPages - 2) {\n                        pageNum = totalPages - 4 + index;\n                      } else {\n                        pageNum = currentPage - 2 + index;\n                      }\n\n                      return (\n                        <Button\n                          key={pageNum}\n                          variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(pageNum)}\n                          data-testid={`button-page-${pageNum}`}\n                        >\n                          {pageNum}\n                        </Button>\n                      );\n                    })}\n\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                      disabled={currentPage === totalPages}\n                      data-testid=\"button-next-page\"\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":36499},"client/src/components/layout/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { BookOpen, Bell, Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n    localStorage.setItem(\"theme\", newTheme);\n  };\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <BookOpen className=\"text-primary-foreground text-sm\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">智学单词</h1>\n            </Link>\n            <nav className=\"hidden md:flex space-x-6\">\n              <Link \n                href=\"/\" \n                className={`transition-colors ${isActive(\"/\") ? \"text-primary font-medium\" : \"text-muted-foreground hover:text-foreground\"}`}\n                data-testid=\"link-dashboard\"\n              >\n                学习概况\n              </Link>\n              <Link \n                href=\"/study\" \n                className={`transition-colors ${isActive(\"/study\") ? \"text-primary font-medium\" : \"text-muted-foreground hover:text-foreground\"}`}\n                data-testid=\"link-study\"\n              >\n                记单词\n              </Link>\n              <Link \n                href=\"/practice\" \n                className={`transition-colors ${isActive(\"/practice\") ? \"text-primary font-medium\" : \"text-muted-foreground hover:text-foreground\"}`}\n                data-testid=\"link-practice\"\n              >\n                练单词\n              </Link>\n              <Link \n                href=\"/plan\" \n                className={`transition-colors ${isActive(\"/plan\") ? \"text-primary font-medium\" : \"text-muted-foreground hover:text-foreground\"}`}\n                data-testid=\"link-plan\"\n              >\n                学习计划\n              </Link>\n              <Link \n                href=\"/wordbank\" \n                className={`transition-colors ${isActive(\"/wordbank\") ? \"text-primary font-medium\" : \"text-muted-foreground hover:text-foreground\"}`}\n                data-testid=\"link-wordbank\"\n              >\n                单词库\n              </Link>\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n              <Bell className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" onClick={toggleTheme} data-testid=\"button-theme-toggle\">\n              {theme === \"light\" ? <Moon className=\"h-4 w-4\" /> : <Sun className=\"h-4 w-4\" />}\n            </Button>\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\">学</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3896},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}